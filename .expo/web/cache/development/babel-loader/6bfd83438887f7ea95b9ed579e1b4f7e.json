{"ast":null,"code":"import { React } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { LocaleConfig } from 'react-native-calendars';\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nLocaleConfig.locales['ru'] = {\n  monthNames: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n  monthNamesShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n  dayNames: ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'],\n  dayNamesShort: ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'],\n  today: \"Сегодня\"\n};\nLocaleConfig.defaultLocale = 'ru';\nexport default function CalendarScreen() {\n  return _jsxs(View, {\n    children: [_jsx(CalendarList, {\n      horizontal: true,\n      pagingEnabled: true,\n      onDayPress: function onDayPress(day) {\n        console.log('selected day', day);\n      }\n    }), _jsx(Agenda, {\n      items: {\n        '2022-06-22': [{\n          name: 'item 1 - any js object'\n        }]\n      },\n      loadItemsForMonth: function loadItemsForMonth(month) {\n        console.log('trigger items loading');\n      },\n      onCalendarToggled: function onCalendarToggled(calendarOpened) {\n        console.log(calendarOpened);\n      },\n      onDayPress: function onDayPress(day) {\n        console.log('day pressed');\n      },\n      onDayChange: function onDayChange(day) {\n        console.log('day changed');\n      },\n      selected: '2012-05-16',\n      minDate: '2012-05-10',\n      maxDate: '2012-05-30',\n      pastScrollRange: 50,\n      futureScrollRange: 50,\n      renderItem: function renderItem(item, firstItemInDay) {\n        return _jsx(View, {});\n      },\n      renderDay: function renderDay(day, item) {\n        return _jsx(View, {});\n      },\n      renderEmptyDate: function renderEmptyDate() {\n        return _jsx(View, {});\n      },\n      renderKnob: function renderKnob() {\n        return _jsx(View, {});\n      },\n      renderEmptyData: function renderEmptyData() {\n        return _jsx(View, {});\n      },\n      rowHasChanged: function rowHasChanged(r1, r2) {\n        return r1.text !== r2.text;\n      },\n      hideKnob: true,\n      showClosingKnob: false,\n      markedDates: {\n        '2022-06-22': {\n          selected: true,\n          marked: true\n        }\n      },\n      disabledByDefault: true,\n      onRefresh: function onRefresh() {\n        return console.log('refreshing...');\n      },\n      refreshing: false,\n      refreshControl: null,\n      theme: {\n        agendaDayTextColor: 'yellow',\n        agendaDayNumColor: 'green',\n        agendaTodayColor: 'red',\n        agendaKnobColor: 'blue'\n      },\n      style: {}\n    })]\n  });\n}","map":{"version":3,"names":["React","LocaleConfig","Calendar","CalendarList","Agenda","locales","monthNames","monthNamesShort","dayNames","dayNamesShort","today","defaultLocale","CalendarScreen","day","console","log","name","month","calendarOpened","item","firstItemInDay","r1","r2","text","selected","marked","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","agendaKnobColor"],"sources":["/home/bruh/Desktop/react-native-app/COVID19-Helper/src/screens/CalendarScreen.js"],"sourcesContent":["import { React } from 'react';\nimport { View } from 'react-native';\nimport { LocaleConfig } from 'react-native-calendars';\nimport {Calendar, CalendarList, Agenda} from 'react-native-calendars';\n\nLocaleConfig.locales['ru'] = {\n    monthNames: [\n      'Январь',\n      'Февраль',\n      'Март',\n      'Апрель',\n      'Май',\n      'Июнь',\n      'Июль',\n      'Август',\n      'Сентябрь',\n      'Октябрь',\n      'Ноябрь',\n      'Декабрь'\n    ],\n    monthNamesShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n    dayNames: ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'],\n    dayNamesShort: ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'],\n    today: \"Сегодня\"\n};\nLocaleConfig.defaultLocale = 'ru';\n\nexport default function CalendarScreen() {\n\n    return(\n        <View>\n            <CalendarList\n                horizontal={true}\n                pagingEnabled={true}\n                onDayPress={day => {\n                    console.log('selected day', day);\n                }}\n            />\n\n            <Agenda\n            // The list of items that have to be displayed in agenda. If you want to render item as empty date\n            // the value of date key has to be an empty array []. If there exists no value for date key it is\n            // considered that the date in question is not yet loaded\n            items={{\n                '2022-06-22': [{name: 'item 1 - any js object'}],\n            }}\n            // Callback that gets called when items for a certain month should be loaded (month became visible)\n            loadItemsForMonth={month => {\n                console.log('trigger items loading');\n            }}\n            // Callback that fires when the calendar is opened or closed\n            onCalendarToggled={calendarOpened => {\n                console.log(calendarOpened);\n            }}\n            // Callback that gets called on day press\n            onDayPress={day => {\n                console.log('day pressed');\n            }}\n            // Callback that gets called when day changes while scrolling agenda list\n            onDayChange={day => {\n                console.log('day changed');\n            }}\n            // Initially selected day\n            selected={'2012-05-16'}\n            // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n            minDate={'2012-05-10'}\n            // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n            maxDate={'2012-05-30'}\n            // Max amount of months allowed to scroll to the past. Default = 50\n            pastScrollRange={50}\n            // Max amount of months allowed to scroll to the future. Default = 50\n            futureScrollRange={50}\n            // Specify how each item should be rendered in agenda\n            renderItem={(item, firstItemInDay) => {\n                return <View />;\n            }}\n            // Specify how each date should be rendered. day can be undefined if the item is not first in that day\n            renderDay={(day, item) => {\n                return <View />;\n            }}\n            // Specify how empty date content with no items should be rendered\n            renderEmptyDate={() => {\n                return <View />;\n            }}\n            // Specify how agenda knob should look like\n            renderKnob={() => {\n                return <View />;\n            }}\n            // Specify what should be rendered instead of ActivityIndicator\n            renderEmptyData={() => {\n                return <View />;\n            }}\n            // Specify your item comparison function for increased performance\n            rowHasChanged={(r1, r2) => {\n                return r1.text !== r2.text;\n            }}\n            // Hide knob button. Default = false\n            hideKnob={true}\n            // When `true` and `hideKnob` prop is `false`, the knob will always be visible and the user will be able to drag the knob up and close the calendar. Default = false\n            showClosingKnob={false}\n            // By default, agenda dates are marked if they have at least one item, but you can override this if needed\n            markedDates={{\n                '2022-06-22': {selected: true, marked: true},\n            }}\n            // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\n            disabledByDefault={true}\n            // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly\n            onRefresh={() => console.log('refreshing...')}\n            // Set this true while waiting for new data from a refresh\n            refreshing={false}\n            // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView\n            refreshControl={null}\n            // Agenda theme\n            theme={{\n                agendaDayTextColor: 'yellow',\n                agendaDayNumColor: 'green',\n                agendaTodayColor: 'red',\n                agendaKnobColor: 'blue'\n            }}\n            // Agenda container style\n            style={{}}\n            />\n        </View>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}