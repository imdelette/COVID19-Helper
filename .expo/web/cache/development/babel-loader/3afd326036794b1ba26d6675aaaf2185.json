{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useVisibleRanges = useVisibleRanges;\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nfunction useVisibleRanges(options) {\n  var _options$total = options.total,\n      total = _options$total === void 0 ? 0 : _options$total,\n      viewSize = options.viewSize,\n      translation = options.translation,\n      _options$windowSize = options.windowSize,\n      _windowSize = _options$windowSize === void 0 ? 0 : _options$windowSize;\n\n  var windowSize = total <= _windowSize ? total : _windowSize;\n  var ranges = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      var positiveCount = Math.round(windowSize / 2);\n      var negativeCount = windowSize - positiveCount;\n      var curIndex = Math.round(-translation.value / viewSize);\n      curIndex = curIndex < 0 ? curIndex % total + total : curIndex;\n      var negativeRange = [(curIndex - negativeCount + total) % total, (curIndex - 1 + total) % total];\n      var positiveRange = [(curIndex + total) % total, (curIndex + positiveCount + total) % total];\n\n      if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n\n      if (positiveRange[0] > positiveRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n\n      return {\n        negativeRange: negativeRange,\n        positiveRange: positiveRange\n      };\n    };\n\n    _f._closure = {\n      windowSize: windowSize,\n      translation: translation,\n      viewSize: viewSize,\n      total: total\n    };\n    _f.asString = \"function _f(){const{windowSize,translation,viewSize,total}=jsThis._closure;{const positiveCount=Math.round(windowSize/2);const negativeCount=windowSize-positiveCount;let curIndex=Math.round(-translation.value/viewSize);curIndex=curIndex<0?curIndex%total+total:curIndex;const negativeRange=[(curIndex-negativeCount+total)%total,(curIndex-1+total)%total];const positiveRange=[(curIndex+total)%total,(curIndex+positiveCount+total)%total];if(negativeRange[0]<total&&negativeRange[0]>negativeRange[1]){negativeRange[1]=total-1;positiveRange[0]=0;}if(positiveRange[0]>positiveRange[1]){negativeRange[1]=total-1;positiveRange[0]=0;}return{negativeRange:negativeRange,positiveRange:positiveRange};}}\";\n    _f.__workletHash = 15212293827170;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/hooks/useVisibleRanges.tsx (24:35)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [total, windowSize, translation]);\n  return ranges;\n}","map":{"version":3,"mappings":";;;;;AACA;;AAOO,SAASA,gBAAT,CAA0BC,OAA1B,EAKY;EACf,qBAKIA,OALJ,CACIC,KADJ;EAAA,IACIA,KADJ,+BACY,CADZ;EAAA,IAEIC,QAFJ,GAKIF,OALJ,CAEIE,QAFJ;EAAA,IAGIC,WAHJ,GAKIH,OALJ,CAGIG,WAHJ;EAAA,0BAKIH,OALJ,CAIII,UAJJ;EAAA,IAIgBC,WAJhB,oCAI8B,CAJ9B;;EAOA,IAAMD,UAAU,GAAGH,KAAK,IAAII,WAATJ,GAAuBA,KAAvBA,GAA+BI,WAAlD;EAEA,IAAMC,MAAM,GAAG;IAAA,uBAAsB;MACjC,IAAMC,aAAa,GAAGC,IAAI,CAACC,KAALD,CAAWJ,UAAU,GAAG,CAAxBI,CAAtB;MACA,IAAME,aAAa,GAAGN,UAAU,GAAGG,aAAnC;MACA,IAAII,QAAQ,GAAGH,IAAI,CAACC,KAALD,CAAW,CAACL,WAAW,CAACS,KAAb,GAAqBV,QAAhCM,CAAf;MACAG,QAAQ,GAAGA,QAAQ,GAAG,CAAXA,GAAgBA,QAAQ,GAAGV,KAAXU,GAAoBV,KAApCU,GAA4CA,QAAvDA;MACA,IAAME,aAAa,GAAG,CAClB,CAACF,QAAQ,GAAGD,aAAXC,GAA2BV,KAA5B,IAAqCA,KADnB,EAElB,CAACU,QAAQ,GAAG,CAAXA,GAAeV,KAAhB,IAAyBA,KAFP,CAAtB;MAIA,IAAMa,aAAa,GAAG,CAClB,CAACH,QAAQ,GAAGV,KAAZ,IAAqBA,KADH,EAElB,CAACU,QAAQ,GAAGJ,aAAXI,GAA2BV,KAA5B,IAAqCA,KAFnB,CAAtB;;MAIA,IAAIY,aAAa,CAAC,CAAD,CAAbA,GAAmBZ,KAAnBY,IAA4BA,aAAa,CAAC,CAAD,CAAbA,GAAmBA,aAAa,CAAC,CAAD,CAAhE,EAAqE;QACjEA,aAAa,CAAC,CAAD,CAAbA,GAAmBZ,KAAK,GAAG,CAA3BY;QACAC,aAAa,CAAC,CAAD,CAAbA,GAAmB,CAAnBA;MAEJ;;MAAA,IAAIA,aAAa,CAAC,CAAD,CAAbA,GAAmBA,aAAa,CAAC,CAAD,CAApC,EAAyC;QACrCD,aAAa,CAAC,CAAD,CAAbA,GAAmBZ,KAAK,GAAG,CAA3BY;QACAC,aAAa,CAAC,CAAD,CAAbA,GAAmB,CAAnBA;MAEJ;;MAAA,OAAO;QAAED,aAAa,EAAbA,aAAF;QAAiBC,aAAa,EAAbA;MAAjB,CAAP;IArBW;;IAAAC;MAAAX,YApBKA,UAoBL;MAAAD,aAnBUA,WAmBV;MAAAD,UAnB8BA,QAmB9B;MAAAD,OARIA;IAQJ;IAAAc;IAAAA;IAAAA;;IAAAC;;IAAA;EAAA,KAsBZ,CAACf,KAAD,EAAQG,UAAR,EAAoBD,WAApB,CAtBY,CAAf;EAwBA,OAAOG,MAAP;AACH","names":["useVisibleRanges","options","total","viewSize","translation","windowSize","_windowSize","ranges","positiveCount","Math","round","negativeCount","curIndex","value","negativeRange","positiveRange","_f","global"],"sources":["useVisibleRanges.tsx"],"sourcesContent":["import type Animated from 'react-native-reanimated';\nimport { useDerivedValue } from 'react-native-reanimated';\n\nexport type IVisibleRanges = Animated.SharedValue<{\n    negativeRange: number[];\n    positiveRange: number[];\n}>;\n\nexport function useVisibleRanges(options: {\n    total: number;\n    viewSize: number;\n    windowSize?: number;\n    translation: Animated.SharedValue<number>;\n}): IVisibleRanges {\n    const {\n        total = 0,\n        viewSize,\n        translation,\n        windowSize: _windowSize = 0,\n    } = options;\n\n    const windowSize = total <= _windowSize ? total : _windowSize;\n\n    const ranges = useDerivedValue(() => {\n        const positiveCount = Math.round(windowSize / 2);\n        const negativeCount = windowSize - positiveCount;\n        let curIndex = Math.round(-translation.value / viewSize);\n        curIndex = curIndex < 0 ? (curIndex % total) + total : curIndex;\n        const negativeRange = [\n            (curIndex - negativeCount + total) % total,\n            (curIndex - 1 + total) % total,\n        ];\n        const positiveRange = [\n            (curIndex + total) % total,\n            (curIndex + positiveCount + total) % total,\n        ];\n        if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n            negativeRange[1] = total - 1;\n            positiveRange[0] = 0;\n        }\n        if (positiveRange[0] > positiveRange[1]) {\n            negativeRange[1] = total - 1;\n            positiveRange[0] = 0;\n        }\n        return { negativeRange, positiveRange };\n    }, [total, windowSize, translation]);\n\n    return ranges;\n}\n"]},"metadata":{},"sourceType":"script"}