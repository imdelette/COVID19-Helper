{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, React } from 'react';\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nimport DrawerNavigator from \"./src/navigation/DrawerNavigator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar fonts = function fonts() {\n  return Font.loadAsync({\n    'rs-bold': require(\"./src/assets/fonts/RobotoSlab/RobotoSlab-Bold.ttf\"),\n    'rs-light': require(\"./src/assets/fonts/RobotoSlab/RobotoSlab-Light.ttf\")\n  });\n};\n\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userToken = _useState4[0],\n      setUserToken = _useState4[1];\n\n  authContext = useMemo(function () {\n    return {\n      signIn: function signIn() {\n        setUserToken('name');\n        setIsLoading(false);\n      },\n      signOut: function signOut() {\n        setUserToken(null);\n        setIsLoading(false);\n      },\n      signUp: function signUp() {\n        setUserToken('name');\n        setIsLoading(false);\n      }\n    };\n  });\n  useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: styles.loadingIndicator,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\"\n      })\n    });\n  }\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      font = _useState6[0],\n      setFont = _useState6[1];\n\n  if (font) {\n    return _jsx(DrawerNavigator, {});\n  } else {\n    return _jsx(AppLoading, {\n      startAsync: fonts,\n      onFinish: function onFinish() {\n        return setFont(true);\n      },\n      onError: console.warn\n    });\n  }\n}","map":{"version":3,"names":["useState","React","AppLoading","Font","DrawerNavigator","fonts","loadAsync","require","App","isLoading","setIsLoading","userToken","setUserToken","authContext","useMemo","signIn","signOut","signUp","useEffect","setTimeout","styles","loadingIndicator","font","setFont","console","warn"],"sources":["/home/bruh/Desktop/react-native-app/COVID19-Helper/App.js"],"sourcesContent":["import { useState, React, } from 'react';\nimport AppLoading from 'expo-app-loading';\nimport  * as Font from 'expo-font';\n\nimport DrawerNavigator from './src/navigation/DrawerNavigator';\n\nconst fonts = () => Font.loadAsync({\n    'rs-bold': require('./src/assets/fonts/RobotoSlab/RobotoSlab-Bold.ttf'),\n    'rs-light': require('./src/assets/fonts/RobotoSlab/RobotoSlab-Light.ttf')\n})\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [userToken, setUserToken] = useState(null);\n\n  authContext = useMemo(() => ({\n    signIn: () => {\n      setUserToken('name');\n      setIsLoading(false);\n    },\n    signOut: () => {\n      setUserToken(null);\n      setIsLoading(false);\n    },\n    signUp: () => {\n      setUserToken('name');\n      setIsLoading(false);\n    }\n  }));\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n  \n  if (isLoading) {\n    return(\n      <View style={styles.loadingIndicator}>\n        <ActivityIndicator size=\"large\"/>\n      </View>\n    )\n  }\n  const [font, setFont] = useState(false);\n\n  if(font) {\n    return (\n      <DrawerNavigator />\n    \n    );\n  } else {\n    return (\n      <AppLoading startAsync={fonts} \n        onFinish={() => setFont(true)}\n        onError={console.warn} />\n    );\n  }\n}"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAQ,KAAKC,IAAb,MAAuB,WAAvB;AAEA,OAAOC,eAAP;;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ;EAAA,OAAMF,IAAI,CAACG,SAAL,CAAe;IAC/B,WAAWC,OAAO,qDADa;IAE/B,YAAYA,OAAO;EAFY,CAAf,CAAN;AAAA,CAAd;;AAKA,eAAe,SAASC,GAAT,GAAe;EAC5B,gBAAkCR,QAAQ,CAAC,IAAD,CAA1C;EAAA;EAAA,IAAOS,SAAP;EAAA,IAAkBC,YAAlB;;EACA,iBAAkCV,QAAQ,CAAC,IAAD,CAA1C;EAAA;EAAA,IAAOW,SAAP;EAAA,IAAkBC,YAAlB;;EAEAC,WAAW,GAAGC,OAAO,CAAC;IAAA,OAAO;MAC3BC,MAAM,EAAE,kBAAM;QACZH,YAAY,CAAC,MAAD,CAAZ;QACAF,YAAY,CAAC,KAAD,CAAZ;MACD,CAJ0B;MAK3BM,OAAO,EAAE,mBAAM;QACbJ,YAAY,CAAC,IAAD,CAAZ;QACAF,YAAY,CAAC,KAAD,CAAZ;MACD,CAR0B;MAS3BO,MAAM,EAAE,kBAAM;QACZL,YAAY,CAAC,MAAD,CAAZ;QACAF,YAAY,CAAC,KAAD,CAAZ;MACD;IAZ0B,CAAP;EAAA,CAAD,CAArB;EAeAQ,SAAS,CAAC,YAAM;IACdC,UAAU,CAAC,YAAM;MACfT,YAAY,CAAC,KAAD,CAAZ;IACD,CAFS,EAEP,IAFO,CAAV;EAGD,CAJQ,EAIN,EAJM,CAAT;;EAMA,IAAID,SAAJ,EAAe;IACb,OACE,KAAC,IAAD;MAAM,KAAK,EAAEW,MAAM,CAACC,gBAApB;MAAA,UACE,KAAC,iBAAD;QAAmB,IAAI,EAAC;MAAxB;IADF,EADF;EAKD;;EACD,iBAAwBrB,QAAQ,CAAC,KAAD,CAAhC;EAAA;EAAA,IAAOsB,IAAP;EAAA,IAAaC,OAAb;;EAEA,IAAGD,IAAH,EAAS;IACP,OACE,KAAC,eAAD,KADF;EAID,CALD,MAKO;IACL,OACE,KAAC,UAAD;MAAY,UAAU,EAAEjB,KAAxB;MACE,QAAQ,EAAE;QAAA,OAAMkB,OAAO,CAAC,IAAD,CAAb;MAAA,CADZ;MAEE,OAAO,EAAEC,OAAO,CAACC;IAFnB,EADF;EAKD;AACF"},"metadata":{},"sourceType":"module"}