{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\nimport SelectionGroup, { SelectionHandler } from 'react-native-selection-group';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var SimpleSurvey = function (_Component) {\n  _inherits(SimpleSurvey, _Component);\n\n  var _super = _createSuper(SimpleSurvey);\n\n  function SimpleSurvey(props) {\n    var _this;\n\n    _classCallCheck(this, SimpleSurvey);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      currentQuestionIndex: 0,\n      answers: []\n    };\n\n    _this.updateAnswer.bind(_assertThisInitialized(_this));\n\n    _this.selectionHandlers = [];\n    return _this;\n  }\n\n  _createClass(SimpleSurvey, [{\n    key: \"getAnswers\",\n    value: function getAnswers() {\n      var filteredAnswers = this.state.answers.filter(function (n) {\n        return n;\n      });\n      return filteredAnswers;\n    }\n  }, {\n    key: \"validateMultipleSelectionSurveyAnswers\",\n    value: function validateMultipleSelectionSurveyAnswers() {\n      var _this$state = this.state,\n          currentQuestionIndex = _this$state.currentQuestionIndex,\n          answers = _this$state.answers;\n\n      if (!this.props.survey[currentQuestionIndex].questionType === 'MultipleSelectionGroup') {\n        throw new Error('validateMultipleSelectionSurveyAnswers was asked to validate a non MultipleSelectionGroup item');\n      }\n\n      var maxMultiSelect = 1;\n      var minMultiSelect = 1;\n\n      if (this.props.survey[currentQuestionIndex].questionSettings.maxMultiSelect) {\n        maxMultiSelect = Number(this.props.survey[currentQuestionIndex].questionSettings.maxMultiSelect);\n      }\n\n      if (this.props.survey[currentQuestionIndex].questionSettings.minMultiSelect) {\n        minMultiSelect = Number(this.props.survey[currentQuestionIndex].questionSettings.minMultiSelect);\n      } else {\n        minMultiSelect = maxMultiSelect;\n      }\n\n      if (answers[currentQuestionIndex] && answers[currentQuestionIndex].value.length >= minMultiSelect) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"updateAnswer\",\n    value: function updateAnswer(answerForCurrentQuestion) {\n      var answers = this.state.answers;\n      answers[this.state.currentQuestionIndex] = answerForCurrentQuestion;\n      this.setState({\n        answers: answers\n      });\n    }\n  }, {\n    key: \"autoAdvance\",\n    value: function autoAdvance() {\n      var answers = this.state.answers;\n      var survey = this.props.survey;\n      var currentQuestionIndex = this.state.currentQuestionIndex;\n\n      if (survey[currentQuestionIndex].questionType === 'MultipleSelectionGroup' && !this.validateMultipleSelectionSurveyAnswers()) {\n        return;\n      }\n\n      if (currentQuestionIndex === this.props.survey.length - 1) {\n        if (this.props.onAnswerSubmitted && answers[currentQuestionIndex]) {\n          this.props.onAnswerSubmitted(answers[currentQuestionIndex]);\n        }\n\n        if (this.props.onSurveyFinished) {\n          var filteredAnswers = answers.filter(function (n) {\n            return n;\n          });\n          this.props.onSurveyFinished(filteredAnswers);\n        }\n      } else {\n        if (this.props.onAnswerSubmitted && answers[currentQuestionIndex]) {\n          this.props.onAnswerSubmitted(answers[currentQuestionIndex]);\n        }\n\n        currentQuestionIndex++;\n        this.setState({\n          currentQuestionIndex: currentQuestionIndex\n        });\n      }\n    }\n  }, {\n    key: \"renderPreviousButton\",\n    value: function renderPreviousButton() {\n      var _this2 = this;\n\n      if (!this.props.renderPrevious) return;\n      var currentQuestionIndex = this.state.currentQuestionIndex;\n      return this.props.renderPrevious(function () {\n        currentQuestionIndex--;\n\n        _this2.setState({\n          currentQuestionIndex: currentQuestionIndex\n        });\n      }, currentQuestionIndex !== 0);\n    }\n  }, {\n    key: \"renderFinishOrNextButton\",\n    value: function renderFinishOrNextButton() {\n      var _this3 = this;\n\n      var answers = this.state.answers;\n      var survey = this.props.survey;\n      var currentQuestionIndex = this.state.currentQuestionIndex;\n      var enabled = false;\n\n      switch (survey[currentQuestionIndex].questionType) {\n        case 'MultipleSelectionGroup':\n          enabled = this.validateMultipleSelectionSurveyAnswers();\n          break;\n\n        case 'Info':\n          enabled = true;\n          break;\n\n        default:\n          enabled = Boolean(answers[currentQuestionIndex]) && (answers[currentQuestionIndex].value || answers[currentQuestionIndex].value === 0);\n          break;\n      }\n\n      if (currentQuestionIndex === this.props.survey.length - 1) {\n        if (!this.props.renderFinished) return;\n        return this.props.renderFinished(function () {\n          if (_this3.props.onAnswerSubmitted && answers[currentQuestionIndex]) {\n            _this3.props.onAnswerSubmitted(answers[currentQuestionIndex]);\n          }\n\n          if (_this3.props.onSurveyFinished) {\n            var filteredAnswers = answers.filter(function (n) {\n              return n;\n            });\n\n            _this3.props.onSurveyFinished(filteredAnswers);\n          }\n        }, enabled);\n      }\n\n      if (!this.props.renderNext) return;\n      return this.props.renderNext(function () {\n        if (_this3.props.onAnswerSubmitted && answers[currentQuestionIndex]) {\n          _this3.props.onAnswerSubmitted(answers[currentQuestionIndex]);\n        }\n\n        currentQuestionIndex++;\n\n        _this3.setState({\n          currentQuestionIndex: currentQuestionIndex\n        });\n      }, enabled);\n    }\n  }, {\n    key: \"renderNavButtons\",\n    value: function renderNavButtons() {\n      var navButtonContainerStyle = this.props.navButtonContainerStyle;\n\n      if (this.props.renderPrevious || this.props.renderNext || this.props.renderFinished) {\n        return _jsxs(View, {\n          style: navButtonContainerStyle,\n          children: [this.renderPreviousButton && this.renderPreviousButton(), this.renderFinishOrNextButton && this.renderFinishOrNextButton()]\n        });\n      }\n\n      return;\n    }\n  }, {\n    key: \"validateSelectionGroupSettings\",\n    value: function validateSelectionGroupSettings(questionSettings, currentQuestionIndex) {\n      if (!questionSettings) return;\n      var allowDeselect = questionSettings.allowDeselect,\n          defaultSelection = questionSettings.defaultSelection,\n          autoAdvanceThisQuestion = questionSettings.autoAdvance;\n\n      if (allowDeselect !== undefined && typeof allowDeselect !== 'boolean') {\n        throw new Error(\"allowDeselect was not passed in as a boolean for question \" + currentQuestionIndex);\n      }\n\n      if (defaultSelection !== undefined && (this.props.autoAdvance || autoAdvanceThisQuestion)) {\n        throw new Error(\"Cannot set auto advance and a default selection for question \" + currentQuestionIndex);\n      }\n\n      if (autoAdvanceThisQuestion !== undefined && typeof autoAdvanceThisQuestion !== 'boolean') {\n        throw new Error(\"autoAdvance was not passed in as a boolean for \" + currentQuestionIndex);\n      }\n    }\n  }, {\n    key: \"renderSelectionGroup\",\n    value: function renderSelectionGroup() {\n      var _this4 = this;\n\n      var _this$props = this.props,\n          survey = _this$props.survey,\n          renderSelector = _this$props.renderSelector,\n          selectionGroupContainerStyle = _this$props.selectionGroupContainerStyle,\n          containerStyle = _this$props.containerStyle;\n      var currentQuestionIndex = this.state.currentQuestionIndex;\n      var autoAdvanceThisQuestion = Boolean(this.props.survey[currentQuestionIndex].questionSettings && this.props.survey[currentQuestionIndex].questionSettings.autoAdvance);\n      this.validateSelectionGroupSettings(this.props.survey[currentQuestionIndex].questionSettings, currentQuestionIndex);\n\n      if (!this.selectionHandlers[currentQuestionIndex]) {\n        if (!this.props.survey[currentQuestionIndex].questionSettings) {\n          this.selectionHandlers[currentQuestionIndex] = new SelectionHandler({\n            maxMultiSelect: 1,\n            allowDeselect: true\n          });\n        } else {\n          var _this$props$survey$cu = this.props.survey[currentQuestionIndex].questionSettings,\n              allowDeselect = _this$props$survey$cu.allowDeselect,\n              defaultSelection = _this$props$survey$cu.defaultSelection;\n\n          if (defaultSelection !== undefined && typeof defaultSelection !== 'number') {\n            throw new Error(\"Default Selection not specified as an index for question \" + currentQuestionIndex);\n          }\n\n          var options = {};\n          options.maxMultiSelect = 1;\n          options.allowDeselect = allowDeselect === undefined || allowDeselect === true;\n          options.defaultSelection = defaultSelection !== undefined ? defaultSelection : null;\n          this.selectionHandlers[currentQuestionIndex] = new SelectionHandler(options);\n\n          if (typeof options.defaultSelection === 'number') {\n            setTimeout(function () {\n              return _this4.updateAnswer({\n                questionId: survey[currentQuestionIndex].questionId,\n                value: survey[currentQuestionIndex].options[options.defaultSelection]\n              });\n            }, 0);\n          }\n        }\n      }\n\n      return _jsxs(View, {\n        style: containerStyle,\n        children: [this.props.renderQuestionText ? this.props.renderQuestionText(this.props.survey[currentQuestionIndex].questionText) : null, _jsx(SelectionGroup, {\n          onPress: this.selectionHandlers[currentQuestionIndex].selectionHandler,\n          items: survey[currentQuestionIndex].options,\n          isSelected: this.selectionHandlers[currentQuestionIndex].isSelected,\n          renderContent: renderSelector,\n          containerStyle: selectionGroupContainerStyle,\n          onItemSelected: function onItemSelected(item) {\n            _this4.updateAnswer({\n              questionId: survey[currentQuestionIndex].questionId,\n              value: item\n            });\n\n            (_this4.props.autoAdvance || autoAdvanceThisQuestion) && _this4.autoAdvance();\n          },\n          onItemDeselected: function onItemDeselected() {\n            _this4.updateAnswer({\n              questionId: survey[currentQuestionIndex].questionId,\n              value: null\n            });\n          }\n        }), this.renderNavButtons()]\n      });\n    }\n  }, {\n    key: \"renderMultipleSelectionGroup\",\n    value: function renderMultipleSelectionGroup() {\n      var _this5 = this;\n\n      var _this$props2 = this.props,\n          survey = _this$props2.survey,\n          renderSelector = _this$props2.renderSelector,\n          selectionGroupContainerStyle = _this$props2.selectionGroupContainerStyle,\n          containerStyle = _this$props2.containerStyle;\n      var currentQuestionIndex = this.state.currentQuestionIndex;\n      var _this$props$survey$cu2 = this.props.survey[currentQuestionIndex].questionSettings,\n          allowDeselect = _this$props$survey$cu2.allowDeselect,\n          defaultSelection = _this$props$survey$cu2.defaultSelection,\n          autoAdvanceThisQuestion = _this$props$survey$cu2.autoAdvance;\n      var multiSelectMax = Number(this.props.survey[currentQuestionIndex].questionSettings.maxMultiSelect);\n\n      if (multiSelectMax === 1) {\n        return this.renderSelectionGroup();\n      }\n\n      this.validateSelectionGroupSettings(this.props.survey[currentQuestionIndex].questionSettings);\n\n      if (!this.selectionHandlers[currentQuestionIndex]) {\n        if (this.props.survey[currentQuestionIndex].questionSettings.maxMultiSelect) {\n          if (defaultSelection !== undefined && !Array.isArray(defaultSelection)) {\n            throw new Error(\"Default Selection not specified as an array for multiple selection question \" + currentQuestionIndex);\n          }\n\n          var options = {};\n          options.maxMultiSelect = multiSelectMax;\n          options.allowDeselect = allowDeselect === undefined || allowDeselect === true;\n          options.defaultSelection = defaultSelection !== undefined ? defaultSelection : null;\n          this.selectionHandlers[currentQuestionIndex] = new SelectionHandler(options);\n\n          if (Array.isArray(options.defaultSelection)) {\n            setTimeout(function () {\n              return _this5.updateAnswer({\n                questionId: survey[currentQuestionIndex].questionId,\n                value: survey[currentQuestionIndex].options.filter(function (element, index) {\n                  return options.defaultSelection.includes(index);\n                })\n              });\n            }, 0);\n          }\n        }\n      }\n\n      return _jsxs(View, {\n        style: containerStyle,\n        children: [this.props.renderQuestionText ? this.props.renderQuestionText(this.props.survey[currentQuestionIndex].questionText) : null, _jsx(SelectionGroup, {\n          onPress: this.selectionHandlers[currentQuestionIndex].selectionHandler,\n          items: survey[currentQuestionIndex].options,\n          isSelected: this.selectionHandlers[currentQuestionIndex].isSelected,\n          getAllSelectedItemIndexes: this.selectionHandlers[currentQuestionIndex].getAllSelectedItemIndexes,\n          renderContent: renderSelector,\n          containerStyle: selectionGroupContainerStyle,\n          onItemSelected: function onItemSelected(item, allSelectedItems) {\n            _this5.updateAnswer({\n              questionId: survey[currentQuestionIndex].questionId,\n              value: allSelectedItems\n            });\n\n            (autoAdvanceThisQuestion || _this5.props.autoAdvance) && _this5.autoAdvance();\n          },\n          onItemDeselected: function onItemDeselected(item, allSelectedItems) {\n            _this5.updateAnswer({\n              questionId: survey[currentQuestionIndex].questionId,\n              value: allSelectedItems\n            });\n          }\n        }), this.renderNavButtons()]\n      });\n    }\n  }, {\n    key: \"renderNumeric\",\n    value: function renderNumeric() {\n      var _this6 = this;\n\n      var _this$props3 = this.props,\n          survey = _this$props3.survey,\n          renderNumericInput = _this$props3.renderNumericInput,\n          containerStyle = _this$props3.containerStyle;\n      var currentQuestionIndex = this.state.currentQuestionIndex;\n      var answers = this.state.answers;\n      var _survey$currentQuesti = survey[currentQuestionIndex],\n          questionText = _survey$currentQuesti.questionText,\n          questionId = _survey$currentQuesti.questionId,\n          _survey$currentQuesti2 = _survey$currentQuesti.placeholderText,\n          placeholderText = _survey$currentQuesti2 === void 0 ? null : _survey$currentQuesti2,\n          _survey$currentQuesti3 = _survey$currentQuesti.defaultValue,\n          defaultValue = _survey$currentQuesti3 === void 0 ? '' : _survey$currentQuesti3;\n\n      if (answers[currentQuestionIndex] === undefined && (defaultValue || defaultValue === 0) && Number.isInteger(parseInt(\"\" + defaultValue, 10))) {\n        setTimeout(function () {\n          return _this6.updateAnswer({\n            questionId: survey[currentQuestionIndex].questionId,\n            value: defaultValue\n          });\n        }, 0);\n      }\n\n      return _jsxs(View, {\n        style: containerStyle,\n        children: [this.props.renderQuestionText ? this.props.renderQuestionText(questionText) : null, renderNumericInput(function (value) {\n          var valInt = parseInt(value, 10);\n\n          if (Number.isInteger(valInt)) {\n            _this6.updateAnswer({\n              questionId: questionId,\n              value: valInt\n            });\n          } else if (value === '') {\n            _this6.updateAnswer({\n              questionId: questionId,\n              value: ''\n            });\n          }\n        }, answers[currentQuestionIndex] === undefined ? '' : answers[currentQuestionIndex].value, placeholderText, this.props.autoAdvance ? this.autoAdvance.bind(this) : null), this.renderNavButtons()]\n      });\n    }\n  }, {\n    key: \"renderTextInputElement\",\n    value: function renderTextInputElement() {\n      var _this7 = this;\n\n      var _this$props4 = this.props,\n          survey = _this$props4.survey,\n          renderTextInput = _this$props4.renderTextInput,\n          containerStyle = _this$props4.containerStyle;\n      var currentQuestionIndex = this.state.currentQuestionIndex;\n      var answers = this.state.answers;\n      var _survey$currentQuesti4 = survey[currentQuestionIndex],\n          questionText = _survey$currentQuesti4.questionText,\n          questionId = _survey$currentQuesti4.questionId,\n          _survey$currentQuesti5 = _survey$currentQuesti4.placeholderText,\n          placeholderText = _survey$currentQuesti5 === void 0 ? null : _survey$currentQuesti5,\n          defaultValue = _survey$currentQuesti4.defaultValue;\n\n      if (answers[currentQuestionIndex] === undefined && defaultValue) {\n        setTimeout(function () {\n          return _this7.updateAnswer({\n            questionId: survey[currentQuestionIndex].questionId,\n            value: defaultValue\n          });\n        }, 0);\n      }\n\n      return _jsxs(View, {\n        style: containerStyle,\n        children: [this.props.renderQuestionText ? this.props.renderQuestionText(questionText) : null, renderTextInput(function (value) {\n          return _this7.updateAnswer({\n            questionId: questionId,\n            value: value\n          });\n        }, answers[currentQuestionIndex] === undefined ? undefined : answers[currentQuestionIndex].value, placeholderText, this.props.autoAdvance ? this.autoAdvance.bind(this) : null), this.renderNavButtons()]\n      });\n    }\n  }, {\n    key: \"renderInfo\",\n    value: function renderInfo() {\n      var currentQuestionIndex = this.state.currentQuestionIndex;\n      var _this$props5 = this.props,\n          survey = _this$props5.survey,\n          renderInfo = _this$props5.renderInfo,\n          containerStyle = _this$props5.containerStyle;\n      var questionText = survey[currentQuestionIndex].questionText;\n      return _jsxs(View, {\n        style: containerStyle,\n        children: [renderInfo(questionText), this.renderNavButtons()]\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var survey = this.props.survey;\n      var currentQuestion = this.state.currentQuestionIndex;\n\n      switch (survey[currentQuestion].questionType) {\n        case 'SelectionGroup':\n          return this.renderSelectionGroup();\n\n        case 'MultipleSelectionGroup':\n          return this.renderMultipleSelectionGroup();\n\n        case 'TextInput':\n          return this.renderTextInputElement();\n\n        case 'NumericInput':\n          return this.renderNumeric();\n\n        case 'Info':\n          return this.renderInfo();\n\n        default:\n          return _jsx(View, {});\n      }\n    }\n  }]);\n\n  return SimpleSurvey;\n}(Component);\nSimpleSurvey.propTypes = {\n  survey: PropTypes.arrayOf(PropTypes.shape({\n    questionType: PropTypes.string.isRequired,\n    questionText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    questionId: PropTypes.string,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      optionText: PropTypes.string.isRequired,\n      value: PropTypes.any.isRequired\n    }))\n  }).isRequired).isRequired,\n  onAnswerSubmitted: PropTypes.func,\n  onSurveyFinished: PropTypes.func,\n  renderSelector: PropTypes.func,\n  renderTextInput: PropTypes.func,\n  selectionGroupContainerStyle: ViewPropTypes.style,\n  containerStyle: ViewPropTypes.style,\n  renderPrev: PropTypes.func,\n  renderNext: PropTypes.func,\n  renderFinished: PropTypes.func,\n  renderInfo: PropTypes.func,\n  autoAdvance: PropTypes.bool\n};","map":{"version":3,"sources":["/home/bruh/Desktop/react-native-app/COVID19-Helper/node_modules/react-native-simple-survey/index.js"],"names":["React","Component","ViewPropTypes","PropTypes","SelectionGroup","SelectionHandler","SimpleSurvey","props","state","currentQuestionIndex","answers","updateAnswer","bind","selectionHandlers","filteredAnswers","filter","n","survey","questionType","Error","maxMultiSelect","minMultiSelect","questionSettings","Number","value","length","answerForCurrentQuestion","setState","validateMultipleSelectionSurveyAnswers","onAnswerSubmitted","onSurveyFinished","renderPrevious","enabled","Boolean","renderFinished","renderNext","navButtonContainerStyle","renderPreviousButton","renderFinishOrNextButton","allowDeselect","defaultSelection","autoAdvanceThisQuestion","autoAdvance","undefined","renderSelector","selectionGroupContainerStyle","containerStyle","validateSelectionGroupSettings","options","setTimeout","questionId","renderQuestionText","questionText","selectionHandler","isSelected","item","renderNavButtons","multiSelectMax","renderSelectionGroup","Array","isArray","element","index","includes","getAllSelectedItemIndexes","allSelectedItems","renderNumericInput","placeholderText","defaultValue","isInteger","parseInt","valInt","renderTextInput","renderInfo","currentQuestion","renderMultipleSelectionGroup","renderTextInputElement","renderNumeric","propTypes","arrayOf","shape","string","isRequired","oneOfType","object","optionText","any","func","style","renderPrev","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    View,\r\n    ViewPropTypes,\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SelectionGroup, { SelectionHandler } from 'react-native-selection-group';\r\n\r\nexport class SimpleSurvey extends Component {\r\n    static propTypes = {\r\n        survey: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                questionType: PropTypes.string.isRequired,\r\n                questionText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n                questionId: PropTypes.string,\r\n                options: PropTypes.arrayOf(PropTypes.shape({\r\n                    optionText: PropTypes.string.isRequired,\r\n                    value: PropTypes.any.isRequired,\r\n                }))\r\n            }).isRequired\r\n        ).isRequired,\r\n        onAnswerSubmitted: PropTypes.func,\r\n        onSurveyFinished: PropTypes.func,\r\n        renderSelector: PropTypes.func,\r\n        renderTextInput: PropTypes.func,\r\n        selectionGroupContainerStyle: ViewPropTypes.style,\r\n        containerStyle: ViewPropTypes.style,\r\n        renderPrev: PropTypes.func,\r\n        renderNext: PropTypes.func,\r\n        renderFinished: PropTypes.func,\r\n        renderInfo: PropTypes.func,\r\n        autoAdvance: PropTypes.bool,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { currentQuestionIndex: 0, answers: [] };\r\n        this.updateAnswer.bind(this);\r\n        this.selectionHandlers = [];\r\n    }\r\n\r\n    getAnswers() {\r\n        const filteredAnswers = this.state.answers.filter(n => n);\r\n        return filteredAnswers;\r\n    }\r\n\r\n    // This function returns true if all the condition have been met for a multiple selection question.\r\n    validateMultipleSelectionSurveyAnswers() {\r\n        const { currentQuestionIndex, answers } = this.state;\r\n        if (!this.props.survey[currentQuestionIndex].questionType === 'MultipleSelectionGroup') {\r\n            throw new Error(\r\n                'validateMultipleSelectionSurveyAnswers was asked to validate a non MultipleSelectionGroup item'\r\n            );\r\n        }\r\n\r\n        let maxMultiSelect = 1;\r\n        let minMultiSelect = 1;\r\n        if (this.props.survey[currentQuestionIndex].questionSettings.maxMultiSelect) {\r\n            maxMultiSelect = Number(this.props.survey[currentQuestionIndex].questionSettings.maxMultiSelect);\r\n        }\r\n\r\n        if (this.props.survey[currentQuestionIndex].questionSettings.minMultiSelect) {\r\n            minMultiSelect = Number(this.props.survey[currentQuestionIndex].questionSettings.minMultiSelect);\r\n        } else {\r\n            minMultiSelect = maxMultiSelect;\r\n        }\r\n\r\n        if (answers[currentQuestionIndex] && answers[currentQuestionIndex].value.length >= minMultiSelect) {\r\n            return true; \r\n        } else { return false; }\r\n    }\r\n\r\n    updateAnswer(answerForCurrentQuestion) {\r\n        const { answers } = this.state;\r\n        answers[this.state.currentQuestionIndex] = answerForCurrentQuestion;\r\n        this.setState({ answers });\r\n    }\r\n\r\n    // Do what the next or finished button normally do.\r\n    autoAdvance() {\r\n        const { answers } = this.state;\r\n        const { survey } = this.props;\r\n        let { currentQuestionIndex } = this.state;\r\n        if (survey[currentQuestionIndex].questionType === 'MultipleSelectionGroup' \r\n            && !this.validateMultipleSelectionSurveyAnswers()) {\r\n                return;\r\n        }\r\n\r\n        if (currentQuestionIndex === this.props.survey.length - 1) {\r\n            if (this.props.onAnswerSubmitted && answers[currentQuestionIndex]) {\r\n                this.props.onAnswerSubmitted(answers[currentQuestionIndex]);\r\n            }\r\n            if (this.props.onSurveyFinished) {\r\n                // Remove empty answers, coming from info screens.\r\n                const filteredAnswers = answers.filter(n => n);\r\n                this.props.onSurveyFinished(filteredAnswers);\r\n            }\r\n        } else {\r\n            if (this.props.onAnswerSubmitted && answers[currentQuestionIndex]) {\r\n                this.props.onAnswerSubmitted(answers[currentQuestionIndex]);\r\n            }\r\n            currentQuestionIndex++;\r\n            this.setState({ currentQuestionIndex });\r\n        }\r\n    }\r\n\r\n    renderPreviousButton() {\r\n        if (!this.props.renderPrevious) return;\r\n        let { currentQuestionIndex } = this.state;\r\n        return (\r\n            this.props.renderPrevious(() => {\r\n                currentQuestionIndex--;\r\n                this.setState({ currentQuestionIndex });\r\n            }, (currentQuestionIndex !== 0)\r\n            ));\r\n    }\r\n\r\n    renderFinishOrNextButton() {\r\n        const { answers } = this.state;\r\n        const { survey } = this.props;\r\n        let { currentQuestionIndex } = this.state;\r\n\r\n        let enabled = false;\r\n\r\n        switch (survey[currentQuestionIndex].questionType) {\r\n            case 'MultipleSelectionGroup': enabled = this.validateMultipleSelectionSurveyAnswers(); break;\r\n            case 'Info': enabled = true; break;\r\n            default: enabled = Boolean(answers[currentQuestionIndex]) && (answers[currentQuestionIndex].value || answers[currentQuestionIndex].value === 0); break;\r\n        }\r\n\r\n        if (currentQuestionIndex === this.props.survey.length - 1) {\r\n            if (!this.props.renderFinished) return;\r\n            return (\r\n                this.props.renderFinished(() => {\r\n                    if (this.props.onAnswerSubmitted && answers[currentQuestionIndex]) {\r\n                        this.props.onAnswerSubmitted(answers[currentQuestionIndex]);\r\n                    }\r\n                    if (this.props.onSurveyFinished) {\r\n                        // Remove empty answers, coming from info screens.\r\n                        const filteredAnswers = answers.filter(n => n);\r\n                        this.props.onSurveyFinished(filteredAnswers);\r\n                    }\r\n                }, enabled));\r\n        }\r\n        if (!this.props.renderNext) return;\r\n        return (\r\n            this.props.renderNext(() => {\r\n                if (this.props.onAnswerSubmitted && answers[currentQuestionIndex]) {\r\n                    this.props.onAnswerSubmitted(answers[currentQuestionIndex]);\r\n                }\r\n                currentQuestionIndex++;\r\n                this.setState({ currentQuestionIndex });\r\n            }, enabled)\r\n        );\r\n    }\r\n\r\n    renderNavButtons() {\r\n        const { navButtonContainerStyle } = this.props;\r\n        if (this.props.renderPrevious || this.props.renderNext || this.props.renderFinished) {\r\n            return (\r\n                <View style={navButtonContainerStyle}>\r\n                    {this.renderPreviousButton && this.renderPreviousButton()}\r\n                    {this.renderFinishOrNextButton && this.renderFinishOrNextButton()}\r\n                </View>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    validateSelectionGroupSettings(questionSettings, currentQuestionIndex) {\r\n        if (!questionSettings) return;\r\n        const { allowDeselect, defaultSelection, autoAdvance: autoAdvanceThisQuestion } = questionSettings;\r\n        if (allowDeselect !== undefined &&\r\n            typeof allowDeselect !== 'boolean') {\r\n            throw new Error(\r\n                `allowDeselect was not passed in as a boolean for question ${currentQuestionIndex}`\r\n            );\r\n        }\r\n        if (defaultSelection !== undefined && (this.props.autoAdvance || autoAdvanceThisQuestion)) {\r\n            throw new Error(\r\n                `Cannot set auto advance and a default selection for question ${currentQuestionIndex}`\r\n            );\r\n        }\r\n        if (autoAdvanceThisQuestion !== undefined && \r\n            typeof autoAdvanceThisQuestion !== 'boolean') {\r\n                throw new Error(\r\n                    `autoAdvance was not passed in as a boolean for ${currentQuestionIndex}`\r\n                );  \r\n        }\r\n    }\r\n\r\n    renderSelectionGroup() {\r\n        const { survey, renderSelector, selectionGroupContainerStyle, containerStyle } = this.props;\r\n        const { currentQuestionIndex } = this.state;\r\n        const autoAdvanceThisQuestion = Boolean(this.props.survey[currentQuestionIndex].questionSettings && this.props.survey[currentQuestionIndex].questionSettings.autoAdvance);\r\n        this.validateSelectionGroupSettings(this.props.survey[currentQuestionIndex].questionSettings, currentQuestionIndex);\r\n        if (!this.selectionHandlers[currentQuestionIndex]) {\r\n            if (!this.props.survey[currentQuestionIndex].questionSettings) {\r\n                this.selectionHandlers[currentQuestionIndex] = new SelectionHandler({ maxMultiSelect: 1, allowDeselect: true });\r\n            } else {    \r\n                const { allowDeselect, defaultSelection } = this.props.survey[currentQuestionIndex].questionSettings;\r\n\r\n                if (defaultSelection !== undefined && typeof defaultSelection !== 'number') {\r\n                    throw new Error(\r\n                        `Default Selection not specified as an index for question ${currentQuestionIndex}`\r\n                    );\r\n                }\r\n\r\n                const options = {};\r\n                options.maxMultiSelect = 1;\r\n                options.allowDeselect = allowDeselect === undefined || allowDeselect === true;\r\n                options.defaultSelection = defaultSelection !== undefined ? defaultSelection : null;\r\n                \r\n                this.selectionHandlers[currentQuestionIndex] = new SelectionHandler(options);\r\n                \r\n                if (typeof options.defaultSelection === 'number') { \r\n                    // Set timeout is used here to avoid updateAnswer's call to setState.\r\n                    setTimeout(() => this.updateAnswer({\r\n                        questionId: survey[currentQuestionIndex].questionId,\r\n                        value: survey[currentQuestionIndex].options[options.defaultSelection]\r\n                        }), 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <View style={containerStyle}>\r\n                {this.props.renderQuestionText ?\r\n                    this.props.renderQuestionText(this.props.survey[currentQuestionIndex].questionText) : null}\r\n                <SelectionGroup\r\n                    onPress={this.selectionHandlers[currentQuestionIndex].selectionHandler}\r\n                    items={survey[currentQuestionIndex].options}\r\n                    isSelected={this.selectionHandlers[currentQuestionIndex].isSelected}\r\n                    renderContent={renderSelector}\r\n                    containerStyle={selectionGroupContainerStyle}\r\n                    onItemSelected={(item) => { \r\n                        this.updateAnswer({\r\n                            questionId: survey[currentQuestionIndex].questionId,\r\n                            value: item\r\n                            });\r\n                        (this.props.autoAdvance || autoAdvanceThisQuestion) && this.autoAdvance();\r\n                    }}\r\n                    onItemDeselected={() => {\r\n                        this.updateAnswer({\r\n                            questionId: survey[currentQuestionIndex].questionId,\r\n                            value: null\r\n                        });\r\n                    }}\r\n                />\r\n                {this.renderNavButtons()}\r\n            </View>\r\n        );\r\n    }\r\n\r\n    renderMultipleSelectionGroup() {\r\n        const { survey, renderSelector, selectionGroupContainerStyle, containerStyle } = this.props;\r\n        const { currentQuestionIndex } = this.state;\r\n        const { allowDeselect, defaultSelection, autoAdvance: autoAdvanceThisQuestion } = \r\n            this.props.survey[currentQuestionIndex].questionSettings;\r\n        const multiSelectMax = Number(this.props.survey[currentQuestionIndex].questionSettings.maxMultiSelect);\r\n        if (multiSelectMax === 1) {\r\n            return this.renderSelectionGroup(); // Why declare multiple selectif only 1 item can be selected?\r\n        }\r\n        this.validateSelectionGroupSettings(this.props.survey[currentQuestionIndex].questionSettings);\r\n\r\n        if (!this.selectionHandlers[currentQuestionIndex]) {\r\n            if (this.props.survey[currentQuestionIndex].questionSettings.maxMultiSelect) {        \r\n                if (defaultSelection !== undefined && !Array.isArray(defaultSelection)) {\r\n                    throw new Error(\r\n                        `Default Selection not specified as an array for multiple selection question ${currentQuestionIndex}`\r\n                    );\r\n                }\r\n                const options = {};\r\n                options.maxMultiSelect = multiSelectMax;\r\n                options.allowDeselect = allowDeselect === undefined || allowDeselect === true;\r\n                options.defaultSelection = defaultSelection !== undefined ? defaultSelection : null;\r\n                this.selectionHandlers[currentQuestionIndex] = new SelectionHandler(options);\r\n\r\n                if (Array.isArray(options.defaultSelection)) {\r\n                    // Set timeout is used here to avoid updateAnswer's call to setState.\r\n                    setTimeout(() => this.updateAnswer({\r\n                        questionId: survey[currentQuestionIndex].questionId,\r\n                        value: survey[currentQuestionIndex].options.filter((element, index) => options.defaultSelection.includes(index)) \r\n                    }), 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <View style={containerStyle}>\r\n                {this.props.renderQuestionText ?\r\n                    this.props.renderQuestionText(this.props.survey[currentQuestionIndex].questionText) : null}\r\n                <SelectionGroup\r\n                    onPress={this.selectionHandlers[currentQuestionIndex].selectionHandler}\r\n                    items={survey[currentQuestionIndex].options}\r\n                    isSelected={this.selectionHandlers[currentQuestionIndex].isSelected}\r\n                    getAllSelectedItemIndexes={this.selectionHandlers[currentQuestionIndex].getAllSelectedItemIndexes}\r\n                    renderContent={renderSelector}\r\n                    containerStyle={selectionGroupContainerStyle}\r\n                    onItemSelected={(item, allSelectedItems) => {\r\n                        this.updateAnswer({\r\n                            questionId: survey[currentQuestionIndex].questionId,\r\n                            value: allSelectedItems\r\n                        });\r\n                        (autoAdvanceThisQuestion || this.props.autoAdvance) && this.autoAdvance();\r\n                    }}\r\n                    onItemDeselected={(item, allSelectedItems) => {\r\n                        this.updateAnswer({\r\n                            questionId: survey[currentQuestionIndex].questionId,\r\n                            value: allSelectedItems\r\n                        });\r\n                    }}\r\n                />\r\n                {this.renderNavButtons()}\r\n            </View>\r\n        );\r\n    }\r\n\r\n    renderNumeric() {\r\n        const { survey, renderNumericInput, containerStyle } = this.props;\r\n        const currentQuestionIndex = this.state.currentQuestionIndex;\r\n        const answers = this.state.answers;\r\n        const { questionText, questionId, placeholderText = null, defaultValue = '' } = survey[currentQuestionIndex];\r\n\r\n        if (answers[currentQuestionIndex] === undefined && (defaultValue || defaultValue === 0) && Number.isInteger(parseInt(`${defaultValue}`, 10))) {\r\n            setTimeout(() => this.updateAnswer({\r\n                questionId: survey[currentQuestionIndex].questionId,\r\n                value: defaultValue\r\n                }), 0);\r\n        }\r\n\r\n        return (\r\n            <View style={containerStyle}>\r\n                {this.props.renderQuestionText ?\r\n                    this.props.renderQuestionText(questionText) : null}\r\n                {renderNumericInput(\r\n                    (value) => {\r\n                        const valInt = parseInt(value, 10);\r\n                        if (Number.isInteger(valInt)) {\r\n                            this.updateAnswer({\r\n                                questionId,\r\n                                value: valInt\r\n                            });\r\n                        } else if (value === '') {\r\n                            this.updateAnswer({\r\n                                questionId,\r\n                                value: ''\r\n                            });\r\n                        }\r\n                    },\r\n                    answers[currentQuestionIndex] === undefined ? '' : answers[currentQuestionIndex].value,\r\n                    placeholderText,\r\n                    this.props.autoAdvance ? this.autoAdvance.bind(this) : null\r\n                )}\r\n                {this.renderNavButtons()}\r\n            </View>\r\n        );\r\n    }\r\n\r\n    renderTextInputElement() {\r\n        const { survey, renderTextInput, containerStyle } = this.props;\r\n        const currentQuestionIndex = this.state.currentQuestionIndex;\r\n        const answers = this.state.answers;\r\n        const { questionText, questionId, placeholderText = null, defaultValue } = survey[currentQuestionIndex];\r\n        if (answers[currentQuestionIndex] === undefined && defaultValue) {\r\n            setTimeout(() => this.updateAnswer({\r\n                questionId: survey[currentQuestionIndex].questionId,\r\n                value: defaultValue\r\n                }), 0);\r\n        }\r\n\r\n        return (<View style={containerStyle}>\r\n            {this.props.renderQuestionText ?\r\n                this.props.renderQuestionText(questionText) : null}\r\n            {renderTextInput((value) =>\r\n                this.updateAnswer({\r\n                    questionId,\r\n                    value\r\n                }),\r\n                answers[currentQuestionIndex] === undefined ? undefined : answers[currentQuestionIndex].value,\r\n                placeholderText,\r\n                this.props.autoAdvance ? this.autoAdvance.bind(this) : null\r\n            )}\r\n            {this.renderNavButtons()}\r\n        </View>\r\n        );\r\n    }\r\n\r\n    renderInfo() {\r\n        const currentQuestionIndex = this.state.currentQuestionIndex;\r\n        const { survey, renderInfo, containerStyle } = this.props;\r\n        const { questionText } = survey[currentQuestionIndex];\r\n        \r\n\r\n        return (<View style={containerStyle}>\r\n            {renderInfo(questionText)}\r\n            {this.renderNavButtons()}\r\n        </View>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { survey } = this.props;\r\n        const currentQuestion = this.state.currentQuestionIndex;\r\n        switch (survey[currentQuestion].questionType) {\r\n            case 'SelectionGroup': return this.renderSelectionGroup();\r\n            case 'MultipleSelectionGroup': return this.renderMultipleSelectionGroup();\r\n            case 'TextInput': return this.renderTextInputElement();\r\n            case 'NumericInput': return this.renderNumeric();\r\n            case 'Info': return this.renderInfo();\r\n            default: return <View />;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}