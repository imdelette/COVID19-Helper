{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOnProgressChange = useOnProgressChange;\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nvar _computedWithAutoFillData = require(\"../utils/computedWithAutoFillData\");\n\nfunction useOnProgressChange(opts) {\n  var autoFillData = opts.autoFillData,\n      loop = opts.loop,\n      offsetX = opts.offsetX,\n      rawData = opts.rawData,\n      size = opts.size,\n      onProgressChange = opts.onProgressChange;\n  var rawDataLength = rawData.length;\n  (0, _reactNativeReanimated.useAnimatedReaction)(function () {\n    var _f = function _f() {\n      return offsetX.value;\n    };\n\n    _f._closure = {\n      offsetX: offsetX\n    };\n    _f.asString = \"function _f(){const{offsetX}=jsThis._closure;{return offsetX.value;}}\";\n    _f.__workletHash = 11091407603539;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/hooks/useOnProgressChange.ts (23:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), function () {\n    var _f = function _f(_value) {\n      var value = (0, _computedWithAutoFillData.computedOffsetXValueWithAutoFillData)({\n        value: _value,\n        rawDataLength: rawDataLength,\n        size: size,\n        autoFillData: autoFillData,\n        loop: loop\n      });\n\n      if (!loop) {\n        value = Math.max(-((rawDataLength - 1) * size), Math.min(value, 0));\n      }\n\n      var absoluteProgress = Math.abs(value / size);\n\n      if (value > 0) {\n        absoluteProgress = rawDataLength - absoluteProgress;\n      }\n\n      !!onProgressChange && (0, _reactNativeReanimated.runOnJS)(onProgressChange)(value, absoluteProgress);\n    };\n\n    _f._closure = {\n      computedOffsetXValueWithAutoFillData: _computedWithAutoFillData.computedOffsetXValueWithAutoFillData,\n      rawDataLength: rawDataLength,\n      size: size,\n      autoFillData: autoFillData,\n      loop: loop,\n      onProgressChange: onProgressChange,\n      runOnJS: _reactNativeReanimated.runOnJS\n    };\n    _f.asString = \"function _f(_value){const{computedOffsetXValueWithAutoFillData,rawDataLength,size,autoFillData,loop,onProgressChange,runOnJS}=jsThis._closure;{let value=computedOffsetXValueWithAutoFillData({value:_value,rawDataLength:rawDataLength,size:size,autoFillData:autoFillData,loop:loop});if(!loop){value=Math.max(-((rawDataLength-1)*size),Math.min(value,0));}let absoluteProgress=Math.abs(value/size);if(value>0){absoluteProgress=rawDataLength-absoluteProgress;}!!onProgressChange&&runOnJS(onProgressChange)(value,absoluteProgress);}}\";\n    _f.__workletHash = 10178584953814;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/hooks/useOnProgressChange.ts (24:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [loop, autoFillData, rawDataLength, onProgressChange]);\n}","map":{"version":3,"mappings":";;;;;AAAA;;AAIA;;AAGO,SAASA,mBAAT,CACHC,IADG,EAQL;EACE,IAAQC,YAAR,GACID,IADJ,CAAQC,YAAR;EAAA,IAAsBC,IAAtB,GACIF,IADJ,CAAsBE,IAAtB;EAAA,IAA4BC,OAA5B,GACIH,IADJ,CAA4BG,OAA5B;EAAA,IAAqCC,OAArC,GACIJ,IADJ,CAAqCI,OAArC;EAAA,IAA8CC,IAA9C,GACIL,IADJ,CAA8CK,IAA9C;EAAA,IAAoDC,gBAApD,GACIN,IADJ,CAAoDM,gBAApD;EAGA,IAAMC,aAAa,GAAGH,OAAO,CAACI,MAA9B;EAEA;IAAA,SACI;MAAA,OAAML,OAAO,CAACM,KAAd;IADJ;;IAAAC;MAAAP,SApBGA;IAoBH;IAAAO;IAAAA;IAAAA;;IAAAC;;IAAA;EAAA;IAAA,qBAEKC,MAFL,EAEgB;MACR,IAAIH,KAAK,GAAG,oEAAqC;QAC7CA,KAAK,EAAEG,MADsC;QAE7CL,aAAa,EAAbA,aAF6C;QAG7CF,IAAI,EAAJA,IAH6C;QAI7CJ,YAAY,EAAZA,YAJ6C;QAK7CC,IAAI,EAAJA;MAL6C,CAArC,CAAZ;;MAQA,IAAI,CAACA,IAAL,EAAW;QACPO,KAAK,GAAGI,IAAI,CAACC,GAALD,CACJ,EAAE,CAACN,aAAa,GAAG,CAAjB,IAAsBF,IAAxB,CADIQ,EAEJA,IAAI,CAACE,GAALF,CAASJ,KAATI,EAAgB,CAAhBA,CAFIA,CAARJ;MAMJ;;MAAA,IAAIO,gBAAgB,GAAGH,IAAI,CAACI,GAALJ,CAASJ,KAAK,GAAGJ,IAAjBQ,CAAvB;;MAEA,IAAIJ,KAAK,GAAG,CAAZ,EAAe;QACXO,gBAAgB,GAAGT,aAAa,GAAGS,gBAAnCA;MAGJ;;MAAA,CAAC,CAACV,gBAAF,IACI,oCAAQA,gBAAR,EAA0BG,KAA1B,EAAiCO,gBAAjC,CADJ;IAxBR;;IAAAN;MAAAQ,sCAnBUA,8DAmBV;MAAAX,eAJmBA,aAInB;MAAAF,MAPsCA,IAOtC;MAAAJ,cAfAA,YAeA;MAAAC,MAXGA,IAWH;MAAAI,kBAD4BA,gBAC5B;MAAAa,SADoBA;IACpB;IAAAT;IAAAA;IAAAA;;IAAAC;;IAAA;EAAA,KA2BI,CAACT,IAAD,EAAOD,YAAP,EAAqBM,aAArB,EAAoCD,gBAApC,CA3BJ;AA6BH","names":["useOnProgressChange","opts","autoFillData","loop","offsetX","rawData","size","onProgressChange","rawDataLength","length","value","_f","global","_value","Math","max","min","absoluteProgress","abs","computedOffsetXValueWithAutoFillData","runOnJS"],"sources":["useOnProgressChange.ts"],"sourcesContent":["import Animated, {\n    runOnJS,\n    useAnimatedReaction,\n} from 'react-native-reanimated';\nimport { computedOffsetXValueWithAutoFillData } from '@/utils/computedWithAutoFillData';\nimport type { TCarouselProps } from '../types';\n\nexport function useOnProgressChange(\n    opts: {\n        size: number;\n        autoFillData: boolean;\n        loop: boolean;\n        offsetX: Animated.SharedValue<number>;\n        rawData: TCarouselProps['data'];\n    } & Pick<TCarouselProps, 'onProgressChange'>\n) {\n    const { autoFillData, loop, offsetX, rawData, size, onProgressChange } =\n        opts;\n\n    const rawDataLength = rawData.length;\n\n    useAnimatedReaction(\n        () => offsetX.value,\n        (_value) => {\n            let value = computedOffsetXValueWithAutoFillData({\n                value: _value,\n                rawDataLength,\n                size,\n                autoFillData,\n                loop,\n            });\n\n            if (!loop) {\n                value = Math.max(\n                    -((rawDataLength - 1) * size),\n                    Math.min(value, 0)\n                );\n            }\n\n            let absoluteProgress = Math.abs(value / size);\n\n            if (value > 0) {\n                absoluteProgress = rawDataLength - absoluteProgress;\n            }\n\n            !!onProgressChange &&\n                runOnJS(onProgressChange)(value, absoluteProgress);\n        },\n        [loop, autoFillData, rawDataLength, onProgressChange]\n    );\n}\n"]},"metadata":{},"sourceType":"script"}