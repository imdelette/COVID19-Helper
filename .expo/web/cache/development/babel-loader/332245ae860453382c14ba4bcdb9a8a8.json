{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScrollViewGesture = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _constants = require(\"./constants\");\n\nvar _store = require(\"./store\");\n\nvar _dealWithAnimation = require(\"./utils/dealWithAnimation\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar IScrollViewGesture = function IScrollViewGesture(props) {\n  var _React$useContext = _react.default.useContext(_store.CTX),\n      _React$useContext$pro = _React$useContext.props,\n      vertical = _React$useContext$pro.vertical,\n      data = _React$useContext$pro.data,\n      pagingEnabled = _React$useContext$pro.pagingEnabled,\n      snapEnabled = _React$useContext$pro.snapEnabled,\n      panGestureHandlerProps = _React$useContext$pro.panGestureHandlerProps,\n      infinite = _React$useContext$pro.loop,\n      scrollAnimationDuration = _React$useContext$pro.scrollAnimationDuration,\n      withAnimation = _React$useContext$pro.withAnimation,\n      enabled = _React$useContext$pro.enabled;\n\n  var translation = props.translation,\n      size = props.size,\n      onScrollBegin = props.onScrollBegin,\n      onScrollEnd = props.onScrollEnd,\n      onTouchBegin = props.onTouchBegin,\n      onTouchEnd = props.onTouchEnd;\n  var maxPage = data.length;\n  var isHorizontal = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      return !vertical;\n    };\n\n    _f._closure = {\n      vertical: vertical\n    };\n    _f.asString = \"function _f(){const{vertical}=jsThis._closure;{return!vertical;}}\";\n    _f.__workletHash = 14495821007639;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (63:41)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [vertical]);\n  var touching = (0, _reactNativeReanimated.useSharedValue)(false);\n  var scrollEndTranslation = (0, _reactNativeReanimated.useSharedValue)(0);\n  var scrollEndVelocity = (0, _reactNativeReanimated.useSharedValue)(0);\n\n  var _withSpring = _react.default.useCallback(function () {\n    var _f = function _f(toValue, onFinished) {\n      var defaultWithAnimation = {\n        type: 'timing',\n        config: {\n          duration: scrollAnimationDuration + 100,\n          easing: _constants.Easing.easeOutQuart\n        }\n      };\n      return (0, _dealWithAnimation.dealWithAnimation)(withAnimation != null ? withAnimation : defaultWithAnimation)(toValue, function () {\n        var _f = function _f(isFinished) {\n          if (isFinished) {\n            onFinished && (0, _reactNativeReanimated.runOnJS)(onFinished)();\n          }\n        };\n\n        _f._closure = {\n          onFinished: onFinished,\n          runOnJS: _reactNativeReanimated.runOnJS\n        };\n        _f.asString = \"function _f(isFinished){const{onFinished,runOnJS}=jsThis._closure;{if(isFinished){onFinished&&runOnJS(onFinished)();}}}\";\n        _f.__workletHash = 9122154549195;\n        _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (81:16)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }());\n    };\n\n    _f._closure = {\n      scrollAnimationDuration: scrollAnimationDuration,\n      Easing: {\n        easeOutQuart: _constants.Easing.easeOutQuart\n      },\n      dealWithAnimation: _dealWithAnimation.dealWithAnimation,\n      withAnimation: withAnimation,\n      runOnJS: _reactNativeReanimated.runOnJS\n    };\n    _f.asString = \"function _f(toValue,onFinished){const{scrollAnimationDuration,Easing,dealWithAnimation,withAnimation,runOnJS}=jsThis._closure;{var _withAnimation;const defaultWithAnimation={type:'timing',config:{duration:scrollAnimationDuration+100,easing:Easing.easeOutQuart}};return dealWithAnimation((_withAnimation=withAnimation)!==null&&_withAnimation!==void 0?_withAnimation:defaultWithAnimation)(toValue,function(isFinished){'worklet';if(isFinished){onFinished&&runOnJS(onFinished)();}});}}\";\n    _f.__workletHash = 16303945491727;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (69:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [scrollAnimationDuration, withAnimation]);\n\n  var endWithSpring = _react.default.useCallback(function () {\n    var _f = function _f(onFinished) {\n      var origin = translation.value;\n      var velocity = scrollEndVelocity.value;\n\n      if (!pagingEnabled) {\n        if (snapEnabled) {\n          var nextPage = Math.round((origin + velocity * 0.4) / size) * size;\n          translation.value = _withSpring(nextPage, onFinished);\n          return;\n        }\n\n        translation.value = (0, _reactNativeReanimated.withDecay)({\n          velocity: velocity,\n          deceleration: 0.999\n        });\n        return;\n      }\n\n      var page = Math.round(-translation.value / size);\n      var velocityPage = Math.round(-(translation.value + scrollEndVelocity.value) / size);\n      var finalPage = Math.min(page + 1, Math.max(page - 1, velocityPage));\n\n      if (!infinite) {\n        finalPage = Math.min(maxPage - 1, Math.max(0, finalPage));\n      }\n\n      translation.value = _withSpring(-finalPage * size, onFinished);\n    };\n\n    _f._closure = {\n      translation: translation,\n      scrollEndVelocity: scrollEndVelocity,\n      pagingEnabled: pagingEnabled,\n      snapEnabled: snapEnabled,\n      size: size,\n      _withSpring: _withSpring,\n      withDecay: _reactNativeReanimated.withDecay,\n      infinite: infinite,\n      maxPage: maxPage\n    };\n    _f.asString = \"function _f(onFinished){const{translation,scrollEndVelocity,pagingEnabled,snapEnabled,size,_withSpring,withDecay,infinite,maxPage}=jsThis._closure;{const origin=translation.value;const velocity=scrollEndVelocity.value;if(!pagingEnabled){if(snapEnabled){const nextPage=Math.round((origin+velocity*0.4)/size)*size;translation.value=_withSpring(nextPage,onFinished);return;}translation.value=withDecay({velocity:velocity,deceleration:0.999});return;}const page=Math.round(-translation.value/size);const velocityPage=Math.round(-(translation.value+scrollEndVelocity.value)/size);let finalPage=Math.min(page+1,Math.max(page-1,velocityPage));if(!infinite){finalPage=Math.min(maxPage-1,Math.max(0,finalPage));}translation.value=_withSpring(-finalPage*size,onFinished);}}\";\n    _f.__workletHash = 6617882707805;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (93:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [infinite, _withSpring, translation, scrollEndVelocity, size, maxPage, pagingEnabled, snapEnabled]);\n\n  var onFinish = _react.default.useCallback(function () {\n    var _f = function _f(isFinished) {\n      if (isFinished) {\n        touching.value = false;\n        onScrollEnd && (0, _reactNativeReanimated.runOnJS)(onScrollEnd)();\n      }\n    };\n\n    _f._closure = {\n      touching: touching,\n      onScrollEnd: onScrollEnd,\n      runOnJS: _reactNativeReanimated.runOnJS\n    };\n    _f.asString = \"function _f(isFinished){const{touching,onScrollEnd,runOnJS}=jsThis._closure;{if(isFinished){touching.value=false;onScrollEnd&&runOnJS(onScrollEnd)();}}}\";\n    _f.__workletHash = 12308424749737;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (137:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [onScrollEnd, touching]);\n\n  var activeDecay = _react.default.useCallback(function () {\n    var _f = function _f() {\n      touching.value = true;\n      translation.value = (0, _reactNativeReanimated.withDecay)({\n        velocity: scrollEndVelocity.value\n      }, function () {\n        var _f = function _f(isFinished) {\n          return onFinish(isFinished);\n        };\n\n        _f._closure = {\n          onFinish: onFinish\n        };\n        _f.asString = \"function _f(isFinished){const{onFinish}=jsThis._closure;{return onFinish(isFinished);}}\";\n        _f.__workletHash = 12004837605207;\n        _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (152:12)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }());\n    };\n\n    _f._closure = {\n      touching: touching,\n      translation: translation,\n      withDecay: _reactNativeReanimated.withDecay,\n      scrollEndVelocity: scrollEndVelocity,\n      onFinish: onFinish\n    };\n    _f.asString = \"function _f(){const{touching,translation,withDecay,scrollEndVelocity,onFinish}=jsThis._closure;{touching.value=true;translation.value=withDecay({velocity:scrollEndVelocity.value},function(isFinished){return onFinish(isFinished);});}}\";\n    _f.__workletHash = 1701548878343;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (147:42)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [onFinish, scrollEndVelocity.value, touching, translation]);\n\n  var resetBoundary = _react.default.useCallback(function () {\n    var _f = function _f() {\n      if (touching.value) {\n        return;\n      }\n\n      if (translation.value > 0) {\n        if (scrollEndTranslation.value < 0) {\n          activeDecay();\n          return;\n        }\n\n        if (!infinite) {\n          translation.value = _withSpring(0);\n          return;\n        }\n      }\n\n      if (translation.value < -((maxPage - 1) * size)) {\n        if (scrollEndTranslation.value > 0) {\n          activeDecay();\n          return;\n        }\n\n        if (!infinite) {\n          translation.value = _withSpring(-((maxPage - 1) * size));\n          return;\n        }\n      }\n    };\n\n    _f._closure = {\n      touching: touching,\n      translation: translation,\n      scrollEndTranslation: scrollEndTranslation,\n      activeDecay: activeDecay,\n      infinite: infinite,\n      _withSpring: _withSpring,\n      maxPage: maxPage,\n      size: size\n    };\n    _f.asString = \"function _f(){const{touching,translation,scrollEndTranslation,activeDecay,infinite,_withSpring,maxPage,size}=jsThis._closure;{if(touching.value){return;}if(translation.value>0){if(scrollEndTranslation.value<0){activeDecay();return;}if(!infinite){translation.value=_withSpring(0);return;}}if(translation.value<-((maxPage-1)*size)){if(scrollEndTranslation.value>0){activeDecay();return;}if(!infinite){translation.value=_withSpring(-((maxPage-1)*size));return;}}}}\";\n    _f.__workletHash = 3458376770899;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (156:44)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [touching.value, translation, maxPage, size, scrollEndTranslation.value, infinite, activeDecay, _withSpring]);\n\n  (0, _reactNativeReanimated.useAnimatedReaction)(function () {\n    var _f = function _f() {\n      return translation.value;\n    };\n\n    _f._closure = {\n      translation: translation\n    };\n    _f.asString = \"function _f(){const{translation}=jsThis._closure;{return translation.value;}}\";\n    _f.__workletHash = 9829368032147;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (195:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), function () {\n    var _f = function _f() {\n      if (!pagingEnabled) {\n        resetBoundary();\n      }\n    };\n\n    _f._closure = {\n      pagingEnabled: pagingEnabled,\n      resetBoundary: resetBoundary\n    };\n    _f.asString = \"function _f(){const{pagingEnabled,resetBoundary}=jsThis._closure;{if(!pagingEnabled){resetBoundary();}}}\";\n    _f.__workletHash = 10686939088248;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (196:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [pagingEnabled, resetBoundary]);\n  var panGestureEventHandler = (0, _reactNativeReanimated.useAnimatedGestureHandler)({\n    onStart: function () {\n      var _f = function _f(_, ctx) {\n        touching.value = true;\n        ctx.validStart = true;\n        onScrollBegin && (0, _reactNativeReanimated.runOnJS)(onScrollBegin)();\n        ctx.max = (maxPage - 1) * size;\n        ctx.panOffset = translation.value;\n      };\n\n      _f._closure = {\n        touching: touching,\n        onScrollBegin: onScrollBegin,\n        runOnJS: _reactNativeReanimated.runOnJS,\n        maxPage: maxPage,\n        size: size,\n        translation: translation\n      };\n      _f.asString = \"function _f(_,ctx){const{touching,onScrollBegin,runOnJS,maxPage,size,translation}=jsThis._closure;{touching.value=true;ctx.validStart=true;onScrollBegin&&runOnJS(onScrollBegin)();ctx.max=(maxPage-1)*size;ctx.panOffset=translation.value;}}\";\n      _f.__workletHash = 1789833551681;\n      _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (209:21)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onActive: function () {\n      var _f = function _f(e, ctx) {\n        if (ctx.validStart) {\n          ctx.validStart = false;\n          (0, _reactNativeReanimated.cancelAnimation)(translation);\n        }\n\n        touching.value = true;\n        var translationX = e.translationX,\n            translationY = e.translationY;\n        var panTranslation = isHorizontal.value ? translationX : translationY;\n\n        if (!infinite && (translation.value > 0 || translation.value < -ctx.max)) {\n          var boundary = translation.value > 0 ? 0 : -ctx.max;\n          var fixed = boundary - ctx.panOffset;\n          var dynamic = panTranslation - fixed;\n          translation.value = boundary + dynamic * 0.5;\n          return;\n        }\n\n        translation.value = ctx.panOffset + panTranslation;\n      };\n\n      _f._closure = {\n        cancelAnimation: _reactNativeReanimated.cancelAnimation,\n        translation: translation,\n        touching: touching,\n        isHorizontal: isHorizontal,\n        infinite: infinite\n      };\n      _f.asString = \"function _f(e,ctx){const{cancelAnimation,translation,touching,isHorizontal,infinite}=jsThis._closure;{if(ctx.validStart){ctx.validStart=false;cancelAnimation(translation);}touching.value=true;const{translationX:translationX,translationY:translationY}=e;let panTranslation=isHorizontal.value?translationX:translationY;if(!infinite&&(translation.value>0||translation.value<-ctx.max)){const boundary=translation.value>0?0:-ctx.max;const fixed=boundary-ctx.panOffset;const dynamic=panTranslation-fixed;translation.value=boundary+dynamic*0.5;return;}translation.value=ctx.panOffset+panTranslation;}}\";\n      _f.__workletHash = 10275621069851;\n      _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (216:22)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f(e) {\n        var velocityX = e.velocityX,\n            velocityY = e.velocityY,\n            translationX = e.translationX,\n            translationY = e.translationY;\n        scrollEndVelocity.value = isHorizontal.value ? velocityX : velocityY;\n        scrollEndTranslation.value = isHorizontal.value ? translationX : translationY;\n        endWithSpring(onScrollEnd);\n\n        if (!infinite) {\n          touching.value = false;\n        }\n      };\n\n      _f._closure = {\n        scrollEndVelocity: scrollEndVelocity,\n        isHorizontal: isHorizontal,\n        scrollEndTranslation: scrollEndTranslation,\n        endWithSpring: endWithSpring,\n        onScrollEnd: onScrollEnd,\n        infinite: infinite,\n        touching: touching\n      };\n      _f.asString = \"function _f(e){const{scrollEndVelocity,isHorizontal,scrollEndTranslation,endWithSpring,onScrollEnd,infinite,touching}=jsThis._closure;{const{velocityX:velocityX,velocityY:velocityY,translationX:translationX,translationY:translationY}=e;scrollEndVelocity.value=isHorizontal.value?velocityX:velocityY;scrollEndTranslation.value=isHorizontal.value?translationX:translationY;endWithSpring(onScrollEnd);if(!infinite){touching.value=false;}}}\";\n      _f.__workletHash = 8095479445863;\n      _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/ScrollViewGesture.tsx (240:19)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }()\n  }, [pagingEnabled, isHorizontal.value, infinite, maxPage, size, snapEnabled, onScrollBegin, onScrollEnd]);\n\n  var directionStyle = _react.default.useMemo(function () {\n    return vertical ? styles.contentHorizontal : styles.contentVertical;\n  }, [vertical]);\n\n  return _react.default.createElement(_reactNativeReanimated.default.View, {\n    style: [styles.container, directionStyle, {\n      width: '100%',\n      height: '100%'\n    }],\n    onTouchStart: onTouchBegin,\n    onTouchEnd: onTouchEnd,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNativeGestureHandler.PanGestureHandler, (0, _extends2.default)({}, panGestureHandlerProps, {\n    enabled: enabled,\n    onGestureEvent: panGestureEventHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }), props.children));\n};\n\nvar ScrollViewGesture = IScrollViewGesture;\nexports.ScrollViewGesture = ScrollViewGesture;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  contentVertical: {\n    flexDirection: 'column'\n  },\n  contentHorizontal: {\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"mappings":"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","names":["IScrollViewGesture","props","React","useContext","CTX","vertical","data","pagingEnabled","snapEnabled","panGestureHandlerProps","infinite","loop","scrollAnimationDuration","withAnimation","enabled","translation","size","onScrollBegin","onScrollEnd","onTouchBegin","onTouchEnd","maxPage","length","isHorizontal","_f","global","touching","scrollEndTranslation","scrollEndVelocity","_withSpring","useCallback","toValue","onFinished","defaultWithAnimation","type","config","duration","easing","Easing","easeOutQuart","isFinished","runOnJS","dealWithAnimation","endWithSpring","origin","value","velocity","nextPage","Math","round","deceleration","page","velocityPage","finalPage","min","max","withDecay","onFinish","activeDecay","resetBoundary","panGestureEventHandler","onStart","_","ctx","validStart","panOffset","onActive","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","cancelAnimation","onEnd","velocityX","velocityY","directionStyle","useMemo","styles","contentHorizontal","contentVertical","_react","_reactNativeReanimated","View","style","container","width","height","onTouchStart","__self","__source","fileName","lineNumber","columnNumber","_reactNativeGestureHandler","onGestureEvent","children","ScrollViewGesture","StyleSheet","create","flex","overflow","flexDirection"],"sources":["ScrollViewGesture.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport {\n    PanGestureHandler,\n    PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport Animated, {\n    cancelAnimation,\n    runOnJS,\n    useAnimatedGestureHandler,\n    useAnimatedReaction,\n    useDerivedValue,\n    useSharedValue,\n    withDecay,\n} from 'react-native-reanimated';\nimport { Easing } from './constants';\nimport { CTX } from './store';\nimport type { WithTimingAnimation } from './types';\nimport { dealWithAnimation } from './utils/dealWithAnimation';\n\ntype GestureContext = {\n    validStart: boolean;\n    panOffset: number;\n    max: number;\n};\n\ninterface Props {\n    size: number;\n    infinite?: boolean;\n    onScrollBegin?: () => void;\n    onScrollEnd?: () => void;\n    onTouchBegin?: () => void;\n    onTouchEnd?: () => void;\n    style?: StyleProp<ViewStyle>;\n    translation: Animated.SharedValue<number>;\n}\n\nconst IScrollViewGesture: React.FC<Props> = (props) => {\n    const {\n        props: {\n            vertical,\n            data,\n            pagingEnabled,\n            snapEnabled,\n            panGestureHandlerProps,\n            loop: infinite,\n            scrollAnimationDuration,\n            withAnimation,\n            enabled,\n        },\n    } = React.useContext(CTX);\n\n    const {\n        translation,\n        size,\n        onScrollBegin,\n        onScrollEnd,\n        onTouchBegin,\n        onTouchEnd,\n    } = props;\n\n    const maxPage = data.length;\n    const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n    const touching = useSharedValue(false);\n    const scrollEndTranslation = useSharedValue(0);\n    const scrollEndVelocity = useSharedValue(0);\n\n    const _withSpring = React.useCallback(\n        (toValue: number, onFinished?: () => void) => {\n            'worklet';\n            const defaultWithAnimation: WithTimingAnimation = {\n                type: 'timing',\n                config: {\n                    duration: scrollAnimationDuration + 100,\n                    easing: Easing.easeOutQuart,\n                },\n            };\n\n            return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n                toValue,\n                (isFinished: boolean) => {\n                    'worklet';\n                    if (isFinished) {\n                        onFinished && runOnJS(onFinished)();\n                    }\n                }\n            );\n        },\n        [scrollAnimationDuration, withAnimation]\n    );\n\n    const endWithSpring = React.useCallback(\n        (onFinished?: () => void) => {\n            'worklet';\n            const origin = translation.value;\n            const velocity = scrollEndVelocity.value;\n            if (!pagingEnabled) {\n                if (snapEnabled) {\n                    const nextPage =\n                        Math.round((origin + velocity * 0.4) / size) * size;\n                    translation.value = _withSpring(nextPage, onFinished);\n                    return;\n                }\n                translation.value = withDecay({\n                    velocity,\n                    deceleration: 0.999,\n                });\n                return;\n            }\n            const page = Math.round(-translation.value / size);\n            const velocityPage = Math.round(\n                -(translation.value + scrollEndVelocity.value) / size\n            );\n            let finalPage = Math.min(\n                page + 1,\n                Math.max(page - 1, velocityPage)\n            );\n            if (!infinite) {\n                finalPage = Math.min(maxPage - 1, Math.max(0, finalPage));\n            }\n\n            translation.value = _withSpring(-finalPage * size, onFinished);\n        },\n        [\n            infinite,\n            _withSpring,\n            translation,\n            scrollEndVelocity,\n            size,\n            maxPage,\n            pagingEnabled,\n            snapEnabled,\n        ]\n    );\n\n    const onFinish = React.useCallback(\n        (isFinished: boolean) => {\n            'worklet';\n            if (isFinished) {\n                touching.value = false;\n                onScrollEnd && runOnJS(onScrollEnd)();\n            }\n        },\n        [onScrollEnd, touching]\n    );\n\n    const activeDecay = React.useCallback(() => {\n        'worklet';\n        touching.value = true;\n        translation.value = withDecay(\n            { velocity: scrollEndVelocity.value },\n            (isFinished) => onFinish(isFinished as boolean)\n        );\n    }, [onFinish, scrollEndVelocity.value, touching, translation]);\n\n    const resetBoundary = React.useCallback(() => {\n        'worklet';\n        if (touching.value) {\n            return;\n        }\n\n        if (translation.value > 0) {\n            if (scrollEndTranslation.value < 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(0);\n                return;\n            }\n        }\n\n        if (translation.value < -((maxPage - 1) * size)) {\n            if (scrollEndTranslation.value > 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(-((maxPage - 1) * size));\n                return;\n            }\n        }\n    }, [\n        touching.value,\n        translation,\n        maxPage,\n        size,\n        scrollEndTranslation.value,\n        infinite,\n        activeDecay,\n        _withSpring,\n    ]);\n\n    useAnimatedReaction(\n        () => translation.value,\n        () => {\n            if (!pagingEnabled) {\n                resetBoundary();\n            }\n        },\n        [pagingEnabled, resetBoundary]\n    );\n\n    const panGestureEventHandler = useAnimatedGestureHandler<\n        PanGestureHandlerGestureEvent,\n        GestureContext\n    >(\n        {\n            onStart: (_, ctx) => {\n                touching.value = true;\n                ctx.validStart = true;\n                onScrollBegin && runOnJS(onScrollBegin)();\n                ctx.max = (maxPage - 1) * size;\n                ctx.panOffset = translation.value;\n            },\n            onActive: (e, ctx) => {\n                if (ctx.validStart) {\n                    ctx.validStart = false;\n                    cancelAnimation(translation);\n                }\n                touching.value = true;\n                const { translationX, translationY } = e;\n                let panTranslation = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                if (\n                    !infinite &&\n                    (translation.value > 0 || translation.value < -ctx.max)\n                ) {\n                    const boundary = translation.value > 0 ? 0 : -ctx.max;\n                    const fixed = boundary - ctx.panOffset;\n                    const dynamic = panTranslation - fixed;\n                    translation.value = boundary + dynamic * 0.5;\n                    return;\n                }\n\n                translation.value = ctx.panOffset + panTranslation;\n            },\n            onEnd: (e) => {\n                const { velocityX, velocityY, translationX, translationY } = e;\n                scrollEndVelocity.value = isHorizontal.value\n                    ? velocityX\n                    : velocityY;\n                scrollEndTranslation.value = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                endWithSpring(onScrollEnd);\n\n                if (!infinite) {\n                    touching.value = false;\n                }\n            },\n        },\n        [\n            pagingEnabled,\n            isHorizontal.value,\n            infinite,\n            maxPage,\n            size,\n            snapEnabled,\n            onScrollBegin,\n            onScrollEnd,\n        ]\n    );\n\n    const directionStyle = React.useMemo(() => {\n        return vertical ? styles.contentHorizontal : styles.contentVertical;\n    }, [vertical]);\n\n    return (\n        <Animated.View\n            style={[\n                styles.container,\n                directionStyle,\n                { width: '100%', height: '100%' },\n            ]}\n            onTouchStart={onTouchBegin}\n            onTouchEnd={onTouchEnd}\n        >\n            <PanGestureHandler\n                {...panGestureHandlerProps}\n                enabled={enabled}\n                onGestureEvent={panGestureEventHandler}\n            >\n                {props.children}\n            </PanGestureHandler>\n        </Animated.View>\n    );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        overflow: 'hidden',\n    },\n    contentVertical: {\n        flexDirection: 'column',\n    },\n    contentHorizontal: {\n        flexDirection: 'row',\n    },\n});\n"]},"metadata":{},"sourceType":"script"}