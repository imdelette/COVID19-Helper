{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.horizontalStackLayout = horizontalStackLayout;\nexports.useHorizontalStackLayout = useHorizontalStackLayout;\nexports.verticalStackLayout = verticalStackLayout;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar screen = _reactNative.Dimensions.get('window');\n\nfunction horizontalStackLayout() {\n  var modeConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function () {\n    var _f = function _f(_value) {\n      var showLength = modeConfig.showLength,\n          _modeConfig$snapDirec = modeConfig.snapDirection,\n          snapDirection = _modeConfig$snapDirec === void 0 ? 'left' : _modeConfig$snapDirec,\n          _modeConfig$moveSize = modeConfig.moveSize,\n          moveSize = _modeConfig$moveSize === void 0 ? screen.width : _modeConfig$moveSize,\n          _modeConfig$stackInte = modeConfig.stackInterval,\n          stackInterval = _modeConfig$stackInte === void 0 ? 18 : _modeConfig$stackInte,\n          _modeConfig$scaleInte = modeConfig.scaleInterval,\n          scaleInterval = _modeConfig$scaleInte === void 0 ? 0.04 : _modeConfig$scaleInte,\n          _modeConfig$opacityIn = modeConfig.opacityInterval,\n          opacityInterval = _modeConfig$opacityIn === void 0 ? 0.1 : _modeConfig$opacityIn,\n          _modeConfig$rotateZDe = modeConfig.rotateZDeg,\n          rotateZDeg = _modeConfig$rotateZDe === void 0 ? 30 : _modeConfig$rotateZDe;\n      var transform = [];\n\n      var _getCommonVariables = getCommonVariables({\n        showLength: showLength,\n        value: _value,\n        snapDirection: snapDirection\n      }),\n          validLength = _getCommonVariables.validLength,\n          value = _getCommonVariables.value,\n          inputRange = _getCommonVariables.inputRange;\n\n      var _getCommonStyles = getCommonStyles({\n        validLength: validLength,\n        value: value,\n        opacityInterval: opacityInterval,\n        snapDirection: snapDirection\n      }),\n          zIndex = _getCommonStyles.zIndex,\n          opacity = _getCommonStyles.opacity;\n\n      var styles = {\n        transform: transform,\n        zIndex: zIndex,\n        opacity: opacity\n      };\n      var translateX;\n      var scale;\n      var rotateZ;\n\n      if (snapDirection === 'left') {\n        translateX = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-moveSize, 0, validLength * stackInterval], _reactNativeReanimated.Extrapolate.CLAMP);\n        scale = (0, _reactNativeReanimated.interpolate)(value, inputRange, [1, 1, 1 - validLength * scaleInterval], _reactNativeReanimated.Extrapolate.CLAMP);\n        rotateZ = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-rotateZDeg, 0, 0], _reactNativeReanimated.Extrapolate.CLAMP) + \"deg\";\n      } else if (snapDirection === 'right') {\n        translateX = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-validLength * stackInterval, 0, moveSize], _reactNativeReanimated.Extrapolate.CLAMP);\n        scale = (0, _reactNativeReanimated.interpolate)(value, inputRange, [1 - validLength * scaleInterval, 1, 1], _reactNativeReanimated.Extrapolate.CLAMP);\n        rotateZ = (0, _reactNativeReanimated.interpolate)(value, inputRange, [0, 0, rotateZDeg], _reactNativeReanimated.Extrapolate.CLAMP) + \"deg\";\n      }\n\n      transform.push({\n        translateX: translateX\n      }, {\n        scale: scale\n      }, {\n        rotateZ: rotateZ\n      });\n      return styles;\n    };\n\n    _f._closure = {\n      screen: {\n        width: screen.width\n      },\n      modeConfig: modeConfig,\n      getCommonVariables: getCommonVariables,\n      getCommonStyles: getCommonStyles,\n      interpolate: _reactNativeReanimated.interpolate,\n      Extrapolate: {\n        CLAMP: _reactNativeReanimated.Extrapolate.CLAMP\n      }\n    };\n    _f.asString = \"function _f(_value){const{screen,modeConfig,getCommonVariables,getCommonStyles,interpolate,Extrapolate}=jsThis._closure;{const{showLength:showLength,snapDirection='left',moveSize=screen.width,stackInterval=18,scaleInterval=0.04,opacityInterval=0.1,rotateZDeg=30}=modeConfig;const transform=[];const{validLength:validLength,value:value,inputRange:inputRange}=getCommonVariables({showLength:showLength,value:_value,snapDirection:snapDirection});const{zIndex:zIndex,opacity:opacity}=getCommonStyles({validLength:validLength,value:value,opacityInterval:opacityInterval,snapDirection:snapDirection});const styles={transform:transform,zIndex:zIndex,opacity:opacity};let translateX;let scale;let rotateZ;if(snapDirection==='left'){translateX=interpolate(value,inputRange,[-moveSize,0,validLength*stackInterval],Extrapolate.CLAMP);scale=interpolate(value,inputRange,[1,1,1-validLength*scaleInterval],Extrapolate.CLAMP);rotateZ=interpolate(value,inputRange,[-rotateZDeg,0,0],Extrapolate.CLAMP)+\\\"deg\\\";}else if(snapDirection==='right'){translateX=interpolate(value,inputRange,[-validLength*stackInterval,0,moveSize],Extrapolate.CLAMP);scale=interpolate(value,inputRange,[1-validLength*scaleInterval,1,1],Extrapolate.CLAMP);rotateZ=interpolate(value,inputRange,[0,0,rotateZDeg],Extrapolate.CLAMP)+\\\"deg\\\";}transform.push({translateX:translateX},{scale:scale},{rotateZ:rotateZ});return styles;}}\";\n    _f.__workletHash = 3265668150098;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/layouts/stack.ts (37:11)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n}\n\nfunction useHorizontalStackLayout() {\n  var customAnimationConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var customConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var config = (0, _react.useMemo)(function () {\n    return _objectSpread({\n      type: customAnimationConfig.snapDirection === 'right' ? 'negative' : 'positive',\n      viewCount: customAnimationConfig.showLength\n    }, customConfig);\n  }, [customAnimationConfig, customConfig]);\n  return {\n    layout: horizontalStackLayout(customAnimationConfig),\n    config: config\n  };\n}\n\nfunction verticalStackLayout() {\n  var modeConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function () {\n    var _f = function _f(_value) {\n      var showLength = modeConfig.showLength,\n          _modeConfig$snapDirec2 = modeConfig.snapDirection,\n          snapDirection = _modeConfig$snapDirec2 === void 0 ? 'left' : _modeConfig$snapDirec2,\n          _modeConfig$moveSize2 = modeConfig.moveSize,\n          moveSize = _modeConfig$moveSize2 === void 0 ? screen.width : _modeConfig$moveSize2,\n          _modeConfig$stackInte2 = modeConfig.stackInterval,\n          stackInterval = _modeConfig$stackInte2 === void 0 ? 18 : _modeConfig$stackInte2,\n          _modeConfig$scaleInte2 = modeConfig.scaleInterval,\n          scaleInterval = _modeConfig$scaleInte2 === void 0 ? 0.04 : _modeConfig$scaleInte2,\n          _modeConfig$opacityIn2 = modeConfig.opacityInterval,\n          opacityInterval = _modeConfig$opacityIn2 === void 0 ? 0.1 : _modeConfig$opacityIn2,\n          _modeConfig$rotateZDe2 = modeConfig.rotateZDeg,\n          rotateZDeg = _modeConfig$rotateZDe2 === void 0 ? 30 : _modeConfig$rotateZDe2;\n      var transform = [];\n\n      var _getCommonVariables2 = getCommonVariables({\n        showLength: showLength,\n        value: _value,\n        snapDirection: snapDirection\n      }),\n          validLength = _getCommonVariables2.validLength,\n          value = _getCommonVariables2.value,\n          inputRange = _getCommonVariables2.inputRange;\n\n      var _getCommonStyles2 = getCommonStyles({\n        validLength: validLength,\n        value: value,\n        opacityInterval: opacityInterval,\n        snapDirection: snapDirection\n      }),\n          zIndex = _getCommonStyles2.zIndex,\n          opacity = _getCommonStyles2.opacity;\n\n      var styles = {\n        transform: transform,\n        zIndex: zIndex,\n        opacity: opacity\n      };\n      var translateX;\n      var scale;\n      var rotateZ;\n      var translateY;\n\n      if (snapDirection === 'left') {\n        translateX = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-moveSize, 0, 0], _reactNativeReanimated.Extrapolate.CLAMP);\n        scale = (0, _reactNativeReanimated.interpolate)(value, inputRange, [1, 1, 1 - validLength * scaleInterval], _reactNativeReanimated.Extrapolate.CLAMP);\n        rotateZ = (0, _reactNativeReanimated.interpolate)(value, inputRange, [-rotateZDeg, 0, 0], _reactNativeReanimated.Extrapolate.CLAMP) + \"deg\";\n        translateY = (0, _reactNativeReanimated.interpolate)(value, inputRange, [0, 0, validLength * stackInterval], _reactNativeReanimated.Extrapolate.CLAMP);\n      } else if (snapDirection === 'right') {\n        translateX = (0, _reactNativeReanimated.interpolate)(value, inputRange, [0, 0, moveSize], _reactNativeReanimated.Extrapolate.CLAMP);\n        scale = (0, _reactNativeReanimated.interpolate)(value, inputRange, [1 - validLength * scaleInterval, 1, 1], _reactNativeReanimated.Extrapolate.CLAMP);\n        rotateZ = (0, _reactNativeReanimated.interpolate)(value, inputRange, [0, 0, rotateZDeg], _reactNativeReanimated.Extrapolate.CLAMP) + \"deg\";\n        translateY = (0, _reactNativeReanimated.interpolate)(value, inputRange, [validLength * stackInterval, 0, 0], _reactNativeReanimated.Extrapolate.CLAMP);\n      }\n\n      transform.push({\n        translateX: translateX\n      }, {\n        scale: scale\n      }, {\n        rotateZ: rotateZ\n      }, {\n        translateY: translateY\n      });\n      return styles;\n    };\n\n    _f._closure = {\n      screen: {\n        width: screen.width\n      },\n      modeConfig: modeConfig,\n      getCommonVariables: getCommonVariables,\n      getCommonStyles: getCommonStyles,\n      interpolate: _reactNativeReanimated.interpolate,\n      Extrapolate: {\n        CLAMP: _reactNativeReanimated.Extrapolate.CLAMP\n      }\n    };\n    _f.asString = \"function _f(_value){const{screen,modeConfig,getCommonVariables,getCommonStyles,interpolate,Extrapolate}=jsThis._closure;{const{showLength:showLength,snapDirection='left',moveSize=screen.width,stackInterval=18,scaleInterval=0.04,opacityInterval=0.1,rotateZDeg=30}=modeConfig;const transform=[];const{validLength:validLength,value:value,inputRange:inputRange}=getCommonVariables({showLength:showLength,value:_value,snapDirection:snapDirection});const{zIndex:zIndex,opacity:opacity}=getCommonStyles({validLength:validLength,value:value,opacityInterval:opacityInterval,snapDirection:snapDirection});const styles={transform:transform,zIndex:zIndex,opacity:opacity};let translateX;let scale;let rotateZ;let translateY;if(snapDirection==='left'){translateX=interpolate(value,inputRange,[-moveSize,0,0],Extrapolate.CLAMP);scale=interpolate(value,inputRange,[1,1,1-validLength*scaleInterval],Extrapolate.CLAMP);rotateZ=interpolate(value,inputRange,[-rotateZDeg,0,0],Extrapolate.CLAMP)+\\\"deg\\\";translateY=interpolate(value,inputRange,[0,0,validLength*stackInterval],Extrapolate.CLAMP);}else if(snapDirection==='right'){translateX=interpolate(value,inputRange,[0,0,moveSize],Extrapolate.CLAMP);scale=interpolate(value,inputRange,[1-validLength*scaleInterval,1,1],Extrapolate.CLAMP);rotateZ=interpolate(value,inputRange,[0,0,rotateZDeg],Extrapolate.CLAMP)+\\\"deg\\\";translateY=interpolate(value,inputRange,[validLength*stackInterval,0,0],Extrapolate.CLAMP);}transform.push({translateX:translateX},{scale:scale},{rotateZ:rotateZ},{translateY:translateY});return styles;}}\";\n    _f.__workletHash = 2365281434390;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/layouts/stack.ts (152:11)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n}\n\nvar getCommonVariables = function () {\n  var _f = function _f(opts) {\n    var showLength = opts.showLength,\n        _value = opts.value,\n        snapDirection = opts.snapDirection;\n\n    function easeInOutCubic(v) {\n      return v < 0.5 ? 4 * v * v * v : 1 - Math.pow(-2 * v + 2, 3) / 2;\n    }\n\n    var page = Math.floor(Math.abs(_value));\n    var diff = Math.abs(_value) % 1;\n    var value = _value < 0 ? -(page + easeInOutCubic(diff)) : page + easeInOutCubic(diff);\n    var validLength = showLength - 1;\n    var inputRange;\n\n    if (snapDirection === 'left') {\n      inputRange = [-1, 0, validLength];\n    } else if (snapDirection === 'right') {\n      inputRange = [-validLength, 0, 1];\n    } else {\n      throw Error('snapDirection must be set to either left or right');\n    }\n\n    return {\n      inputRange: inputRange,\n      validLength: validLength,\n      value: value\n    };\n  };\n\n  _f._closure = {};\n  _f.asString = \"function getCommonVariables(opts){const{showLength:showLength,value:_value,snapDirection:snapDirection}=opts;function easeInOutCubic(v){return v<0.5?4*v*v*v:1-Math.pow(-2*v+2,3)/2;}const page=Math.floor(Math.abs(_value));const diff=Math.abs(_value)%1;const value=_value<0?-(page+easeInOutCubic(diff)):page+easeInOutCubic(diff);const validLength=showLength-1;let inputRange;if(snapDirection==='left'){inputRange=[-1,0,validLength];}else if(snapDirection==='right'){inputRange=[-validLength,0,1];}else{throw Error('snapDirection must be set to either left or right');}return{inputRange:inputRange,validLength:validLength,value:value};}\";\n  _f.__workletHash = 3893657980264;\n  _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/layouts/stack.ts (259:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar getCommonStyles = function () {\n  var _f = function _f(opts) {\n    var snapDirection = opts.snapDirection,\n        validLength = opts.validLength,\n        value = opts.value,\n        opacityInterval = opts.opacityInterval;\n    var zIndex;\n    var opacity;\n\n    if (snapDirection === 'left') {\n      zIndex = Math.floor((0, _reactNativeReanimated.interpolate)(value, [-1.5, -1, -1 + Number.MIN_VALUE, 0, validLength], [Number.MIN_VALUE, validLength, validLength, validLength - 1, -1]) * 10000) / 100;\n      opacity = (0, _reactNativeReanimated.interpolate)(value, [-1, 0, validLength - 1, validLength], [0.25, 1, 1 - (validLength - 1) * opacityInterval, 0.25]);\n    } else if (snapDirection === 'right') {\n      zIndex = Math.floor((0, _reactNativeReanimated.interpolate)(value, [-validLength, 0, 1 - Number.MIN_VALUE, 1, 1.5], [1, validLength - 1, validLength, validLength, Number.MIN_VALUE]) * 10000) / 100;\n      opacity = (0, _reactNativeReanimated.interpolate)(value, [-validLength, 1 - validLength, 0, 1], [0.25, 1 - (validLength - 1) * opacityInterval, 1, 0.25]);\n    } else {\n      throw Error('snapDirection must be set to either left or right');\n    }\n\n    return {\n      zIndex: zIndex,\n      opacity: opacity\n    };\n  };\n\n  _f._closure = {\n    interpolate: _reactNativeReanimated.interpolate\n  };\n  _f.asString = \"function getCommonStyles(opts){const{interpolate}=jsThis._closure;{const{snapDirection:snapDirection,validLength:validLength,value:value,opacityInterval:opacityInterval}=opts;let zIndex;let opacity;if(snapDirection==='left'){zIndex=Math.floor(interpolate(value,[-1.5,-1,-1+Number.MIN_VALUE,0,validLength],[Number.MIN_VALUE,validLength,validLength,validLength-1,-1])*10000)/100;opacity=interpolate(value,[-1,0,validLength-1,validLength],[0.25,1,1-(validLength-1)*opacityInterval,0.25]);}else if(snapDirection==='right'){zIndex=Math.floor(interpolate(value,[-validLength,0,1-Number.MIN_VALUE,1,1.5],[1,validLength-1,validLength,validLength,Number.MIN_VALUE])*10000)/100;opacity=interpolate(value,[-validLength,1-validLength,0,1],[0.25,1-(validLength-1)*opacityInterval,1,0.25]);}else{throw Error('snapDirection must be set to either left or right');}return{zIndex:zIndex,opacity:opacity};}}\";\n  _f.__workletHash = 16145327689090;\n  _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/layouts/stack.ts (295:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"mappings":"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","names":["screen","Dimensions","get","horizontalStackLayout","modeConfig","_value","showLength","snapDirection","moveSize","width","stackInterval","scaleInterval","opacityInterval","rotateZDeg","transform","getCommonVariables","value","validLength","inputRange","getCommonStyles","zIndex","opacity","styles","translateX","scale","rotateZ","Extrapolate","CLAMP","push","_f","interpolate","global","useHorizontalStackLayout","customAnimationConfig","customConfig","config","type","viewCount","layout","verticalStackLayout","translateY","opts","easeInOutCubic","v","Math","pow","page","floor","abs","diff","Error","Number","MIN_VALUE"],"sources":["stack.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { Dimensions, TransformsStyle, ViewStyle } from 'react-native';\nimport { Extrapolate, interpolate } from 'react-native-reanimated';\nimport type { ComputedDirectionTypes, CustomConfig } from '../types';\n\nconst screen = Dimensions.get('window');\n\nexport interface ILayoutConfig {\n    showLength?: number;\n    moveSize?: number;\n    stackInterval?: number;\n    scaleInterval?: number;\n    opacityInterval?: number;\n    rotateZDeg?: number;\n    snapDirection?: 'left' | 'right';\n}\n\nexport type TStackModeProps = ComputedDirectionTypes<{\n    /**\n     * Carousel Animated transitions.\n     */\n    mode?: 'horizontal-stack' | 'vertical-stack';\n    /**\n     * Stack animation style.\n     * @default\n     *     mode: 'vertical',\n     *     snapDirection: 'right',\n     *     moveSize: window.width,\n     *     stackInterval: 30,\n     *     scaleInterval: 0.08,\n     *     rotateZDeg: 135,\n     */\n    modeConfig?: ILayoutConfig;\n}>;\n\nexport function horizontalStackLayout(modeConfig: ILayoutConfig = {}) {\n    return (_value: number) => {\n        'worklet';\n\n        const {\n            showLength,\n            snapDirection = 'left',\n            moveSize = screen.width,\n            stackInterval = 18,\n            scaleInterval = 0.04,\n            opacityInterval = 0.1,\n            rotateZDeg = 30,\n        } = modeConfig;\n\n        const transform: TransformsStyle['transform'] = [];\n        const { validLength, value, inputRange } = getCommonVariables({\n            showLength: showLength!,\n            value: _value,\n            snapDirection,\n        });\n        const { zIndex, opacity } = getCommonStyles({\n            validLength,\n            value,\n            opacityInterval,\n            snapDirection,\n        });\n\n        const styles: ViewStyle = {\n            transform,\n            zIndex,\n            opacity,\n        };\n\n        let translateX: number;\n        let scale: number;\n        let rotateZ: string;\n\n        if (snapDirection === 'left') {\n            translateX = interpolate(\n                value,\n                inputRange,\n                [-moveSize, 0, validLength * stackInterval],\n                Extrapolate.CLAMP\n            );\n            scale = interpolate(\n                value,\n                inputRange,\n                [1, 1, 1 - validLength * scaleInterval],\n                Extrapolate.CLAMP\n            );\n            rotateZ = `${interpolate(\n                value,\n                inputRange,\n                [-rotateZDeg, 0, 0],\n                Extrapolate.CLAMP\n            )}deg`;\n        } else if (snapDirection === 'right') {\n            translateX = interpolate(\n                value,\n                inputRange,\n                [-validLength * stackInterval, 0, moveSize],\n                Extrapolate.CLAMP\n            );\n            scale = interpolate(\n                value,\n                inputRange,\n                [1 - validLength * scaleInterval, 1, 1],\n                Extrapolate.CLAMP\n            );\n            rotateZ = `${interpolate(\n                value,\n                inputRange,\n                [0, 0, rotateZDeg],\n                Extrapolate.CLAMP\n            )}deg`;\n        }\n\n        transform.push(\n            {\n                translateX: translateX!,\n            },\n            {\n                scale: scale!,\n            },\n            {\n                rotateZ: rotateZ!,\n            }\n        );\n\n        return styles;\n    };\n}\n\nexport function useHorizontalStackLayout(\n    customAnimationConfig: ILayoutConfig = {},\n    customConfig: CustomConfig = {}\n) {\n    const config = useMemo(\n        () => ({\n            type:\n                customAnimationConfig.snapDirection === 'right'\n                    ? 'negative'\n                    : 'positive',\n            viewCount: customAnimationConfig.showLength,\n            ...customConfig,\n        }),\n        [customAnimationConfig, customConfig]\n    );\n\n    return {\n        layout: horizontalStackLayout(customAnimationConfig),\n        config,\n    };\n}\n\nexport function verticalStackLayout(modeConfig: ILayoutConfig = {}) {\n    return (_value: number) => {\n        'worklet';\n\n        const {\n            showLength,\n            snapDirection = 'left',\n            moveSize = screen.width,\n            stackInterval = 18,\n            scaleInterval = 0.04,\n            opacityInterval = 0.1,\n            rotateZDeg = 30,\n        } = modeConfig;\n        const transform: TransformsStyle['transform'] = [];\n        const { validLength, value, inputRange } = getCommonVariables({\n            showLength: showLength!,\n            value: _value,\n            snapDirection,\n        });\n        const { zIndex, opacity } = getCommonStyles({\n            validLength,\n            value,\n            opacityInterval,\n            snapDirection,\n        });\n\n        const styles: ViewStyle = {\n            transform,\n            zIndex,\n            opacity,\n        };\n\n        let translateX: number;\n        let scale: number;\n        let rotateZ: string;\n        let translateY: number;\n\n        if (snapDirection === 'left') {\n            translateX = interpolate(\n                value,\n                inputRange,\n                [-moveSize, 0, 0],\n                Extrapolate.CLAMP\n            );\n            scale = interpolate(\n                value,\n                inputRange,\n                [1, 1, 1 - validLength * scaleInterval],\n                Extrapolate.CLAMP\n            );\n            rotateZ = `${interpolate(\n                value,\n                inputRange,\n                [-rotateZDeg, 0, 0],\n                Extrapolate.CLAMP\n            )}deg`;\n            translateY = interpolate(\n                value,\n                inputRange,\n                [0, 0, validLength * stackInterval],\n                Extrapolate.CLAMP\n            );\n        } else if (snapDirection === 'right') {\n            translateX = interpolate(\n                value,\n                inputRange,\n                [0, 0, moveSize],\n                Extrapolate.CLAMP\n            );\n            scale = interpolate(\n                value,\n                inputRange,\n                [1 - validLength * scaleInterval, 1, 1],\n                Extrapolate.CLAMP\n            );\n            rotateZ = `${interpolate(\n                value,\n                inputRange,\n                [0, 0, rotateZDeg],\n                Extrapolate.CLAMP\n            )}deg`;\n            translateY = interpolate(\n                value,\n                inputRange,\n                [validLength * stackInterval, 0, 0],\n                Extrapolate.CLAMP\n            );\n        }\n\n        transform.push(\n            {\n                translateX: translateX!,\n            },\n            {\n                scale: scale!,\n            },\n            {\n                rotateZ: rotateZ!,\n            },\n            {\n                translateY: translateY!,\n            }\n        );\n\n        return styles;\n    };\n}\n\nfunction getCommonVariables(opts: {\n    value: number;\n    showLength: number;\n    snapDirection: 'left' | 'right';\n}) {\n    'worklet';\n\n    const { showLength, value: _value, snapDirection } = opts;\n    function easeInOutCubic(v: number): number {\n        return v < 0.5 ? 4 * v * v * v : 1 - Math.pow(-2 * v + 2, 3) / 2;\n    }\n    const page = Math.floor(Math.abs(_value));\n    const diff = Math.abs(_value) % 1;\n    const value =\n        _value < 0\n            ? -(page + easeInOutCubic(diff))\n            : page + easeInOutCubic(diff);\n    const validLength = showLength! - 1;\n\n    let inputRange: [number, number, number];\n\n    if (snapDirection === 'left') {\n        inputRange = [-1, 0, validLength];\n    } else if (snapDirection === 'right') {\n        inputRange = [-validLength, 0, 1];\n    } else {\n        throw Error('snapDirection must be set to either left or right');\n    }\n\n    return {\n        inputRange,\n        validLength,\n        value,\n    };\n}\n\nfunction getCommonStyles(opts: {\n    value: number;\n    validLength: number;\n    opacityInterval: number;\n    snapDirection: 'left' | 'right';\n}) {\n    'worklet';\n\n    const { snapDirection, validLength, value, opacityInterval } = opts;\n\n    let zIndex: number;\n    let opacity: number;\n\n    if (snapDirection === 'left') {\n        zIndex =\n            Math.floor(\n                interpolate(\n                    value,\n                    [-1.5, -1, -1 + Number.MIN_VALUE, 0, validLength],\n                    [\n                        Number.MIN_VALUE,\n                        validLength,\n                        validLength,\n                        validLength - 1,\n                        -1,\n                    ]\n                ) * 10000\n            ) / 100;\n\n        opacity = interpolate(\n            value,\n            [-1, 0, validLength - 1, validLength],\n            [0.25, 1, 1 - (validLength - 1) * opacityInterval, 0.25]\n        );\n    } else if (snapDirection === 'right') {\n        zIndex =\n            Math.floor(\n                interpolate(\n                    value,\n                    [-validLength, 0, 1 - Number.MIN_VALUE, 1, 1.5],\n                    [\n                        1,\n                        validLength - 1,\n                        validLength,\n                        validLength,\n                        Number.MIN_VALUE,\n                    ]\n                ) * 10000\n            ) / 100;\n        opacity = interpolate(\n            value,\n            [-validLength, 1 - validLength, 0, 1],\n            [0.25, 1 - (validLength - 1) * opacityInterval, 1, 0.25]\n        );\n    } else {\n        throw Error('snapDirection must be set to either left or right');\n    }\n\n    return {\n        zIndex,\n        opacity,\n    };\n}\n"]},"metadata":{},"sourceType":"script"}