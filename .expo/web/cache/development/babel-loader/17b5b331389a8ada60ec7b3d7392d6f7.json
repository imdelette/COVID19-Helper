{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parallaxLayout = parallaxLayout;\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nfunction parallaxLayout(baseConfig) {\n  var modeConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var size = baseConfig.size,\n      vertical = baseConfig.vertical;\n  var _modeConfig$parallaxS = modeConfig.parallaxScrollingOffset,\n      parallaxScrollingOffset = _modeConfig$parallaxS === void 0 ? 100 : _modeConfig$parallaxS,\n      _modeConfig$parallaxS2 = modeConfig.parallaxScrollingScale,\n      parallaxScrollingScale = _modeConfig$parallaxS2 === void 0 ? 0.8 : _modeConfig$parallaxS2,\n      _modeConfig$parallaxA = modeConfig.parallaxAdjacentItemScale,\n      parallaxAdjacentItemScale = _modeConfig$parallaxA === void 0 ? Math.pow(parallaxScrollingScale, 2) : _modeConfig$parallaxA;\n  return function () {\n    var _f = function _f(value) {\n      var translate = (0, _reactNativeReanimated.interpolate)(value, [-1, 0, 1], [-size + parallaxScrollingOffset, 0, size - parallaxScrollingOffset]);\n      var zIndex = (0, _reactNativeReanimated.interpolate)(value, [-1, 0, 1], [0, size, 0], _reactNativeReanimated.Extrapolate.CLAMP);\n      var scale = (0, _reactNativeReanimated.interpolate)(value, [-1, 0, 1], [parallaxAdjacentItemScale, parallaxScrollingScale, parallaxAdjacentItemScale], _reactNativeReanimated.Extrapolate.CLAMP);\n      return {\n        transform: [vertical ? {\n          translateY: translate\n        } : {\n          translateX: translate\n        }, {\n          scale: scale\n        }],\n        zIndex: zIndex\n      };\n    };\n\n    _f._closure = {\n      interpolate: _reactNativeReanimated.interpolate,\n      size: size,\n      parallaxScrollingOffset: parallaxScrollingOffset,\n      Extrapolate: {\n        CLAMP: _reactNativeReanimated.Extrapolate.CLAMP\n      },\n      parallaxAdjacentItemScale: parallaxAdjacentItemScale,\n      parallaxScrollingScale: parallaxScrollingScale,\n      vertical: vertical\n    };\n    _f.asString = \"function _f(value){const{interpolate,size,parallaxScrollingOffset,Extrapolate,parallaxAdjacentItemScale,parallaxScrollingScale,vertical}=jsThis._closure;{const translate=interpolate(value,[-1,0,1],[-size+parallaxScrollingOffset,0,size-parallaxScrollingOffset]);const zIndex=interpolate(value,[-1,0,1],[0,size,0],Extrapolate.CLAMP);const scale=interpolate(value,[-1,0,1],[parallaxAdjacentItemScale,parallaxScrollingScale,parallaxAdjacentItemScale],Extrapolate.CLAMP);return{transform:[vertical?{translateY:translate}:{translateX:translate},{scale:scale}],zIndex:zIndex};}}\";\n    _f.__workletHash = 942233491674;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/layouts/parallax.ts (46:11)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n}","map":{"version":3,"mappings":";;;;;AAAA;;AAkCO,SAASA,cAAT,CACHC,UADG,EAGL;EAAA,IADEC,UACF,uEAD8B,EAC9B;EACE,IAAQC,IAAR,GAA2BF,UAA3B,CAAQE,IAAR;EAAA,IAAcC,QAAd,GAA2BH,UAA3B,CAAcG,QAAd;EACA,4BAIIF,UAJJ,CACIG,uBADJ;EAAA,IACIA,uBADJ,sCAC8B,GAD9B;EAAA,6BAIIH,UAJJ,CAEII,sBAFJ;EAAA,IAEIA,sBAFJ,uCAE6B,GAF7B;EAAA,4BAIIJ,UAJJ,CAGIK,yBAHJ;EAAA,IAGIA,yBAHJ,sCAGgCC,IAAI,CAACC,GAALD,CAASF,sBAATE,EAAiC,CAAjCA,CAHhC;EAMA;IAAA,qBAAQE,KAAR,EAA0B;MAEtB,IAAMC,SAAS,GAAG,wCACdD,KADc,EAEd,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAFc,EAGd,CAAC,CAACP,IAAD,GAAQE,uBAAT,EAAkC,CAAlC,EAAqCF,IAAI,GAAGE,uBAA5C,CAHc,CAAlB;MAMA,IAAMO,MAAM,GAAG,wCACXF,KADW,EAEX,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAFW,EAGX,CAAC,CAAD,EAAIP,IAAJ,EAAU,CAAV,CAHW,EAIXU,mCAAYC,KAJD,CAAf;MAOA,IAAMC,KAAK,GAAG,wCACVL,KADU,EAEV,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAFU,EAGV,CACIH,yBADJ,EAEID,sBAFJ,EAGIC,yBAHJ,CAHU,EAQVM,mCAAYC,KARF,CAAd;MAWA,OAAO;QACHE,SAAS,EAAE,CACPZ,QAAQ,GACF;UACIa,UAAU,EAAEN;QADhB,CADE,GAIF;UACIO,UAAU,EAAEP;QADhB,CALC,EAQP;UACII,KAAK,EAALA;QADJ,CARO,CADR;QAaHH,MAAM,EAANA;MAbG,CAAP;IA1BJ;;IAAAO;MAAAC,aAzCYA,kCAyCZ;MAAAjB,MA1CgDA,IA0ChD;MAAAE,yBA3C2FA,uBA2C3F;MAAAQ;QAAAC,OAzC2HD,mCAAYC;MAyCvI;MAAAP,2BAzC+FA,yBAyC/F;MAAAD,wBAzCuEA,sBAyCvE;MAAAF,UAvCYA;IAuCZ;IAAAe;IAAAA;IAAAA;;IAAAE;;IAAA;EAAA;AA0CH","names":["parallaxLayout","baseConfig","modeConfig","size","vertical","parallaxScrollingOffset","parallaxScrollingScale","parallaxAdjacentItemScale","Math","pow","value","translate","zIndex","Extrapolate","CLAMP","scale","transform","translateY","translateX","_f","interpolate","global"],"sources":["parallax.ts"],"sourcesContent":["import { Extrapolate, interpolate } from 'react-native-reanimated';\nimport type { ComputedDirectionTypes } from '../types';\n\ntype TBaseConfig = {\n    size: number;\n    vertical: boolean;\n};\n\nexport interface ILayoutConfig {\n    /**\n     * control prev/next item offset.\n     * @default 100\n     */\n    parallaxScrollingOffset?: number;\n    /**\n     * control prev/current/next item offset.\n     * @default 0.8\n     */\n    parallaxScrollingScale?: number;\n    /**\n     * control prev/next item offset.\n     * @default Math.pow(parallaxScrollingScale, 2)\n     */\n    parallaxAdjacentItemScale?: number;\n}\n\nexport type TParallaxModeProps = ComputedDirectionTypes<{\n    /**\n     * Carousel Animated transitions.\n     */\n    mode?: 'parallax';\n    modeConfig?: ILayoutConfig;\n}>;\n\nexport function parallaxLayout(\n    baseConfig: TBaseConfig,\n    modeConfig: ILayoutConfig = {}\n) {\n    const { size, vertical } = baseConfig;\n    const {\n        parallaxScrollingOffset = 100,\n        parallaxScrollingScale = 0.8,\n        parallaxAdjacentItemScale = Math.pow(parallaxScrollingScale, 2),\n    } = modeConfig;\n\n    return (value: number) => {\n        'worklet';\n        const translate = interpolate(\n            value,\n            [-1, 0, 1],\n            [-size + parallaxScrollingOffset, 0, size - parallaxScrollingOffset]\n        );\n\n        const zIndex = interpolate(\n            value,\n            [-1, 0, 1],\n            [0, size, 0],\n            Extrapolate.CLAMP\n        );\n\n        const scale = interpolate(\n            value,\n            [-1, 0, 1],\n            [\n                parallaxAdjacentItemScale,\n                parallaxScrollingScale,\n                parallaxAdjacentItemScale,\n            ],\n            Extrapolate.CLAMP\n        );\n\n        return {\n            transform: [\n                vertical\n                    ? {\n                          translateY: translate,\n                      }\n                    : {\n                          translateX: translate,\n                      },\n                {\n                    scale,\n                },\n            ],\n            zIndex,\n        };\n    };\n}\n"]},"metadata":{},"sourceType":"script"}