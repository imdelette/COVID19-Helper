{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOnProgressChange = useOnProgressChange;\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nvar _computedWithAutoFillData = require(\"../utils/computedWithAutoFillData\");\n\nfunction useOnProgressChange(opts) {\n  var autoFillData = opts.autoFillData,\n      loop = opts.loop,\n      offsetX = opts.offsetX,\n      rawData = opts.rawData,\n      size = opts.size,\n      onProgressChange = opts.onProgressChange;\n  var rawDataLength = rawData.length;\n  (0, _reactNativeReanimated.useAnimatedReaction)(function () {\n    var _f = function _f() {\n      return offsetX.value;\n    };\n\n    _f._closure = {\n      offsetX: offsetX\n    };\n    _f.asString = \"function _f(){const{offsetX}=jsThis._closure;{return offsetX.value;}}\";\n    _f.__workletHash = 11091407603539;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/hooks/useOnProgressChange.ts (23:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), function () {\n    var _f = function _f(_value) {\n      var value = (0, _computedWithAutoFillData.computedOffsetXValueWithAutoFillData)({\n        value: _value,\n        rawDataLength: rawDataLength,\n        size: size,\n        autoFillData: autoFillData,\n        loop: loop\n      });\n\n      if (!loop) {\n        value = Math.max(-((rawDataLength - 1) * size), Math.min(value, 0));\n      }\n\n      var absoluteProgress = Math.abs(value / size);\n\n      if (value > 0) {\n        absoluteProgress = rawDataLength - absoluteProgress;\n      }\n\n      !!onProgressChange && (0, _reactNativeReanimated.runOnJS)(onProgressChange)(value, absoluteProgress);\n    };\n\n    _f._closure = {\n      computedOffsetXValueWithAutoFillData: _computedWithAutoFillData.computedOffsetXValueWithAutoFillData,\n      rawDataLength: rawDataLength,\n      size: size,\n      autoFillData: autoFillData,\n      loop: loop,\n      onProgressChange: onProgressChange,\n      runOnJS: _reactNativeReanimated.runOnJS\n    };\n    _f.asString = \"function _f(_value){const{computedOffsetXValueWithAutoFillData,rawDataLength,size,autoFillData,loop,onProgressChange,runOnJS}=jsThis._closure;{let value=computedOffsetXValueWithAutoFillData({value:_value,rawDataLength:rawDataLength,size:size,autoFillData:autoFillData,loop:loop});if(!loop){value=Math.max(-((rawDataLength-1)*size),Math.min(value,0));}let absoluteProgress=Math.abs(value/size);if(value>0){absoluteProgress=rawDataLength-absoluteProgress;}!!onProgressChange&&runOnJS(onProgressChange)(value,absoluteProgress);}}\";\n    _f.__workletHash = 10178584953814;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/hooks/useOnProgressChange.ts (24:8)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [loop, autoFillData, rawDataLength, onProgressChange]);\n}","map":{"version":3,"sources":["useOnProgressChange.ts"],"names":["offsetX","computedOffsetXValueWithAutoFillData","autoFillData","loop","size","rawData","onProgressChange","opts","rawDataLength","runOnJS","value","Math","absoluteProgress"],"mappings":";;;;;AAAA,IAAA,sBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAIA,IAAA,yBAAA,GAAA,OAAA,qCAAA;;AAGO,SAAA,mBAAA,CAAA,IAAA,EAQL;AACE,MAAQE,YAAR,GACIK,IADJ,CAAA,YAAA;AAAA,MAAsBJ,IAAtB,GACII,IADJ,CAAA,IAAA;AAAA,MAA4BP,OAA5B,GACIO,IADJ,CAAA,OAAA;AAAA,MAAqCF,OAArC,GACIE,IADJ,CAAA,OAAA;AAAA,MAA8CH,IAA9C,GACIG,IADJ,CAAA,IAAA;AAAA,MAAoDD,gBAApD,GACIC,IADJ,CAAA,gBAAA;AAGA,MAAMC,aAAa,GAAGH,OAAO,CAA7B,MAAA;AAEA,GAAA,GAAA,sBAAA,CAAA,mBAAA,EAAA,YAAA;AAAA,QAAA,EAAA,GACI,SAAA,EAAA,GAAA;AAAA,aAAML,OAAO,CAAb,KAAA;AADJ,KAAA;;AAAA,IAAA,EAAA,CAAA,QAAA,GAAA;AAAA,MAAA,OAAA,EApBGA;AAoBH,KAAA;AAAA,IAAA,EAAA,CAAA,QAAA,GAAA,uEAAA;AAAA,IAAA,EAAA,CAAA,aAAA,GAAA,cAAA;AAAA,IAAA,EAAA,CAAA,UAAA,GAAA,yGAAA;;AAAA,IAAA,MAAA,CAAA,uBAAA,CAAA,EAAA;;AAAA,WAAA,EAAA;AAAA,GAAA,EAAA,EAAA,YAAA;AAAA,QAAA,EAAA,GAAA,SAAA,EAAA,CAAA,MAAA,EAEgB;AACR,UAAIU,KAAK,GAAG,CAAA,GAAA,yBAAA,CAAA,oCAAA,EAAqC;AAC7CA,QAAAA,KAAK,EADwC,MAAA;AAE7CF,QAAAA,aAAa,EAFgC,aAAA;AAG7CJ,QAAAA,IAAI,EAHyC,IAAA;AAI7CF,QAAAA,YAAY,EAJiC,YAAA;AAK7CC,QAAAA,IAAI,EALR;AAAiD,OAArC,CAAZ;;AAQA,UAAI,CAAJ,IAAA,EAAW;AACPO,QAAAA,KAAK,GAAGC,IAAI,CAAJA,GAAAA,CACJ,EAAE,CAACH,aAAa,GAAd,CAAA,IADEG,IACJ,CADIA,EAEJA,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAFJD,CAEIC,CAFIA,CAARD;AAMJ;;AAAA,UAAIE,gBAAgB,GAAGD,IAAI,CAAJA,GAAAA,CAASD,KAAK,GAArC,IAAuBC,CAAvB;;AAEA,UAAID,KAAK,GAAT,CAAA,EAAe;AACXE,QAAAA,gBAAgB,GAAGJ,aAAa,GAAhCI,gBAAAA;AAGJ;;AAAA,OAAC,CAAD,gBAAA,IACI,CAAA,GAAA,sBAAA,CAAA,OAAA,EAAA,gBAAA,EAAA,KAAA,EADJ,gBACI,CADJ;AAxBR,KAAA;;AAAA,IAAA,EAAA,CAAA,QAAA,GAAA;AAAA,MAAA,oCAAA,EAnBUX,yBAAAA,CAAAA,oCAmBV;AAAA,MAAA,aAAA,EAJmBO,aAInB;AAAA,MAAA,IAAA,EAPsCJ,IAOtC;AAAA,MAAA,YAAA,EAfAF,YAeA;AAAA,MAAA,IAAA,EAXGC,IAWH;AAAA,MAAA,gBAAA,EAD4BG,gBAC5B;AAAA,MAAA,OAAA,EADoBG,sBAAAA,CAAAA;AACpB,KAAA;AAAA,IAAA,EAAA,CAAA,QAAA,GAAA,ghBAAA;AAAA,IAAA,EAAA,CAAA,aAAA,GAAA,cAAA;AAAA,IAAA,EAAA,CAAA,UAAA,GAAA,yGAAA;;AAAA,IAAA,MAAA,CAAA,uBAAA,CAAA,EAAA;;AAAA,WAAA,EAAA;AAAA,GAAA,EAAA,EA2BI,CAAA,IAAA,EAAA,YAAA,EAAA,aAAA,EA3BJ,gBA2BI,CA3BJ;AA6BH","sourcesContent":["import Animated, {\n    runOnJS,\n    useAnimatedReaction,\n} from 'react-native-reanimated';\nimport { computedOffsetXValueWithAutoFillData } from '@/utils/computedWithAutoFillData';\nimport type { TCarouselProps } from '../types';\n\nexport function useOnProgressChange(\n    opts: {\n        size: number;\n        autoFillData: boolean;\n        loop: boolean;\n        offsetX: Animated.SharedValue<number>;\n        rawData: TCarouselProps['data'];\n    } & Pick<TCarouselProps, 'onProgressChange'>\n) {\n    const { autoFillData, loop, offsetX, rawData, size, onProgressChange } =\n        opts;\n\n    const rawDataLength = rawData.length;\n\n    useAnimatedReaction(\n        () => offsetX.value,\n        (_value) => {\n            let value = computedOffsetXValueWithAutoFillData({\n                value: _value,\n                rawDataLength,\n                size,\n                autoFillData,\n                loop,\n            });\n\n            if (!loop) {\n                value = Math.max(\n                    -((rawDataLength - 1) * size),\n                    Math.min(value, 0)\n                );\n            }\n\n            let absoluteProgress = Math.abs(value / size);\n\n            if (value > 0) {\n                absoluteProgress = rawDataLength - absoluteProgress;\n            }\n\n            !!onProgressChange &&\n                runOnJS(onProgressChange)(value, absoluteProgress);\n        },\n        [loop, autoFillData, rawDataLength, onProgressChange]\n    );\n}\n"]},"metadata":{},"sourceType":"script"}